{"version":3,"file":"static/js/636.9f1e86e8.chunk.js","mappings":"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","sources":["components/SplitViewController.js","components/DualMapTimelapse.js","components/SplitViewMap.js"],"sourcesContent":["import React, {useEffect} from 'react';\r\nimport { useMapContext } from './MapContext';\r\n\r\nfunction SplitViewController ({ isSplitView, setSplitView }) {\r\n\r\n    const { setEventForAnalysisComponent, setShowChart, neighbourhoodEvents} = useMapContext();\r\n    \r\n    useEffect(() => {\r\n        if(neighbourhoodEvents && neighbourhoodEvents.length > 0) {\r\n          setEventForAnalysisComponent(neighbourhoodEvents[0])\r\n        }\r\n      }, [neighbourhoodEvents]);\r\n\r\n    return (\r\n        <div className=\"split-view-controller\">\r\n            <button className='split-view-controller-toggle-button' onClick={() => {\r\n                setShowChart(false);\r\n                setSplitView(!isSplitView);\r\n            }}>\r\n                {isSplitView ? 'Return to Single Map View' : 'Show Splitview'}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SplitViewController;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { useMapContext } from './MapContext';\r\nimport \"../App.css\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlay, faPause } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction DualMapTimelpase ({leftMap, rightMap, originalBusynessHashMap, timelapseData, baselineTimelapseData, busynessHashMap}) {\r\n\r\n    const { updateLayerColours, neighbourhoodEvents } = useMapContext();\r\n\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [elapsedTime, setElapsedTime] = useState(0);\r\n    const [index, setIndex] = useState(0);\r\n    const [currentEvent, setCurrentEvent] = useState(null);\r\n\r\n    const timerRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        setCurrentEvent(neighbourhoodEvents[0])\r\n    }, [neighbourhoodEvents]);\r\n    \r\n    const startTimelapse = () => {\r\n        setIsPlaying(true);\r\n        timerRef.current = setInterval(() => {\r\n            setElapsedTime(prevTime => prevTime + 1);\r\n        }, 1000);\r\n    };\r\n\r\n    const pauseTimelapse = () => {\r\n        setIsPlaying(false);\r\n        clearInterval(timerRef.current);\r\n    };\r\n\r\n    const handlePlay = () => {\r\n        isPlaying ? pauseTimelapse() : startTimelapse();\r\n    };\r\n\r\n    const endTimelapse = () => {\r\n        \r\n        const resetPosition = baselineTimelapseData[16]\r\n\r\n        setIndex(0);\r\n        setElapsedTime(0);\r\n        setIsPlaying(false);\r\n        clearInterval(timerRef.current);\r\n\r\n        setTimeout(() => {\r\n            updateLayerColours(leftMap.current, false, busynessHashMap, resetPosition);\r\n            updateLayerColours(rightMap.current, false, busynessHashMap, busynessHashMap);\r\n        }, 400)\r\n    }\r\n\r\n    const handleSliderChange = (e) => {\r\n\r\n        pauseTimelapse(); \r\n        const newElapsedTime = Number(e.target.value);\r\n        setElapsedTime(newElapsedTime);\r\n    \r\n        // Ensure we have a valid integer index\r\n        const index = Math.floor(newElapsedTime);\r\n        if (timelapseData && timelapseData.hasOwnProperty(index)) {\r\n            const TimelapseHashMap = timelapseData[index];\r\n            const BaselineHashMap = baselineTimelapseData[index];\r\n            updateLayerColours(rightMap.current, false, originalBusynessHashMap, TimelapseHashMap);\r\n            updateLayerColours(leftMap.current, false, originalBusynessHashMap, BaselineHashMap);\r\n            setIndex(index);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n\r\n        if (elapsedTime >= 24) {\r\n            endTimelapse();\r\n        }\r\n\r\n        if(Number.isInteger(elapsedTime) && timelapseData && timelapseData.hasOwnProperty(index)){\r\n            const TimelapseHashMap = timelapseData[index];\r\n            const BaselineHashMap = baselineTimelapseData[index];\r\n            updateLayerColours(rightMap.current, false, originalBusynessHashMap, TimelapseHashMap);\r\n            updateLayerColours(leftMap.current, false, originalBusynessHashMap, BaselineHashMap);\r\n            setIndex(index + 1);\r\n        }\r\n        \r\n    }, [elapsedTime]);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            if (timerRef.current) clearInterval(timerRef.current);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div className='timelapse-container'>\r\n            <button className=\"timelapse-button\" onClick={handlePlay}>\r\n                {isPlaying ? <FontAwesomeIcon icon={faPause} style={{color:'#D3D3D3'}}/> : <FontAwesomeIcon icon={faPlay} style={{color:'#D3D3D3'}}/>}\r\n                <label htmlFor=\"toggle\" className=\"timelapse-label\">{isPlaying ? \"pause\" : \"play\"}</label>\r\n            </button>\r\n            <div className='slider-container-parent'>\r\n                <div className='slider-context-container'>\r\n                    <p className='elapsed-time-text'> Local Time: {elapsedTime >= 10 ? '' : 0}{elapsedTime}:00 {elapsedTime >= 12 ? 'PM' : 'AM'}</p>\r\n                </div>\r\n                <div className='slider-container'>\r\n                    <input type=\"range\" min=\"0\" max=\"24\" value={elapsedTime} onChange={handleSliderChange} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default DualMapTimelpase;\r\n","import React, { useState, useCallback, useMemo, useRef, useEffect } from 'react';\r\nimport Map from 'react-map-gl';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport SplitViewController from '../components/SplitViewController'\r\nimport DualMapTimelapse from './DualMapTimelapse';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport { useMapContext } from './MapContext';\r\nimport { scaleLinear } from 'd3-scale';\r\n\r\n  const LeftMapStyle = {\r\n      position: 'absolute',\r\n      width: '50%',\r\n      height: '100vh'\r\n  };\r\n  \r\n  const RightMapStyle = {\r\n    position: 'absolute',\r\n    left: '50%',\r\n    width: '50%',\r\n    height: '100vh'\r\n  };\r\n  \r\nfunction SplitViewMap({eventBaselineHashMap, busynessHashMap, timelapseData, baselineTimelapseData}) {\r\n\r\n  const {MAPBOX_ACCESS_TOKEN, isSplitView, setSplitView, renderNeighbourhoods, markers, mapStyle} = useMapContext();\r\n\r\n  const {updateLayerColours} = useMapContext();\r\n\r\n  const {colourPairs, colourPairIndex, neighbourhoods} = useMapContext();\r\n\r\n  const leftMapRef = useRef();\r\n  const rightMapRef = useRef();\r\n  const popup = useRef(null);\r\n\r\n  const [viewState, setViewState] = useState({\r\n    longitude: -73.9857,\r\n    latitude: 40.7484,\r\n    zoom: 11.2,\r\n    pitch: 30\r\n  });\r\n\r\n  const [mode, setMode] = useState('side-by-side');\r\n  const [activeMap, setActiveMap] = useState('left');\r\n\r\n  const onLeftMoveStart = useCallback(() => setActiveMap('left'), []);\r\n  const onRightMoveStart = useCallback(() => setActiveMap('right'), []);\r\n  const onMove = useCallback(evt => setViewState(evt.viewState), []);\r\n\r\n  const width = typeof window === 'undefined' ? 100 : window.innerWidth;\r\n\r\n  const leftMapPadding = useMemo(() => {\r\n    return {left: mode === 'split-screen' ? width / 1 : 0, top: 0, right: 0, bottom: 0};\r\n  }, [width, mode]);\r\n\r\n  const rightMapPadding = useMemo(() => {\r\n    return {right: mode === 'split-screen' ? width / 1 : 0, top: 0, left: 0, bottom: 0};\r\n  }, [width, mode]);\r\n\r\n  // Map Event Listeners for mouse\r\n  const handleSplitScreenMouseInteractions = (map, hashmap) => {\r\n\r\n    // Create a new colourScale each time you handle the color change\r\n    const colourScale = scaleLinear().domain([0, 0.4, 0.8]).range(colourPairs[colourPairIndex]);\r\n\r\n    neighbourhoods.features.forEach((neighbourhood) => {\r\n\r\n      // Mouseover event\r\n      map.on('mousemove', neighbourhood.id, (e) => {\r\n\r\n      map.getCanvas().style.cursor = 'pointer';\r\n      map.setPaintProperty(neighbourhood.id, 'fill-opacity', 0.9);\r\n      map.setPaintProperty(neighbourhood.id+'-line', 'line-width', 4);\r\n      \r\n      const features = map.queryRenderedFeatures(e.point, { layers: [neighbourhood.id] });\r\n\r\n      if (features.length > 0) {\r\n\r\n        if (!popup.current) {\r\n\r\n            // code to allow the pop up to display a bit over our mouse interaction.\r\n\r\n            const markerHeight = 10;\r\n            const markerRadius = 10;\r\n            const linearOffset = 5;\r\n            const popupOffsets = {\r\n            'top': [0, 0],\r\n            'top-left': [0, 0],\r\n            'top-right': [0, 0],\r\n            'bottom': [0, -markerHeight],\r\n            'bottom-left': [linearOffset, (markerHeight - markerRadius + linearOffset) * -1],\r\n            'bottom-right': [-linearOffset, (markerHeight - markerRadius + linearOffset) * -1],\r\n            'left': [markerRadius, (markerHeight - markerRadius) * -1],\r\n            'right': [-markerRadius, (markerHeight - markerRadius) * -1]\r\n            };\r\n\r\n            // creating the popup object\r\n\r\n            popup.current = new mapboxgl.Popup({\r\n                offset: popupOffsets,\r\n                closeButton: false,\r\n                closeOnClick: false,\r\n            });\r\n          }\r\n\r\n          const feature = features[0];\r\n          const zone = feature.properties.zone; \r\n\r\n          const score = hashmap[neighbourhood.id]\r\n          \r\n          // Apply the busyness score to the color scale\r\n          const textColour = colourScale(score);\r\n\r\n          let richText;\r\n          if (score < 0.29) {\r\n              richText = 'Not Very Busy';\r\n          } else if (score >= 0.29 && score < 0.4) {\r\n              richText = 'Relatively Busy';\r\n          } else if (score >= 0.4 && score < 0.7) {\r\n              richText = 'Busy';\r\n          } else {\r\n              richText = 'Extremely Busy';\r\n          }\r\n\r\n          // Set the HTML content of the popup with the colored text\r\n          popup.current.setLngLat(e.lngLat)\r\n          .setHTML(`${zone}: <span style=\"color: ${textColour}\">${richText}</span>\r\n          <br>\r\n          Busyness Score:  <span style=\"color: ${textColour}\">${Math.floor(score * 100)}</span>\r\n          `)\r\n          .addTo(map);\r\n        }\r\n\r\n      });\r\n  \r\n      // Mouseleave event: this will be fired whenever the mouse leaves a feature in the specified layer.\r\n      map.on('mouseleave', neighbourhood.id, () => {\r\n            map.getCanvas().style.cursor = '';\r\n            map.setPaintProperty(neighbourhood.id, 'fill-opacity', 0.6);\r\n            map.setPaintProperty(neighbourhood.id+'-line', 'line-width', 0);\r\n\r\n            if (popup.current) {\r\n                popup.current.remove();\r\n                popup.current = null;\r\n            }\r\n      });\r\n    });\r\n  }\r\n\r\n  const onLeftMapLoad = useCallback((event) => {\r\n    const map = event.target;\r\n    leftMapRef.current = map;\r\n    console.log('r', map);\r\n    renderNeighbourhoods(map);\r\n    updateLayerColours(map, true, eventBaselineHashMap, busynessHashMap)\r\n    handleSplitScreenMouseInteractions(map, eventBaselineHashMap)\r\n  }, [renderNeighbourhoods]);\r\n\r\n  const onRightMapLoad = useCallback((event) => {\r\n    const map = event.target;\r\n    rightMapRef.current = map;\r\n    console.log('r', map);\r\n    renderNeighbourhoods(map);\r\n    updateLayerColours(map, false, eventBaselineHashMap, busynessHashMap)\r\n    handleSplitScreenMouseInteractions(map, busynessHashMap)\r\n  }, [renderNeighbourhoods]);\r\n\r\n  return (\r\n    <>\r\n      <div style={{position: 'relative', height: '100vh'}}>\r\n        <Map\r\n          id=\"left-map\"\r\n          {...viewState}\r\n          padding={leftMapPadding}\r\n          onMoveStart={onLeftMoveStart}\r\n          onMove={activeMap === 'left' ? onMove : undefined}\r\n          style={LeftMapStyle}\r\n          mapStyle={mapStyle}\r\n          mapboxAccessToken={MAPBOX_ACCESS_TOKEN}\r\n          onLoad={map => onLeftMapLoad(map)} // Added this line\r\n        />\r\n        <div className=\"split-view-map-label\" style={{top: '18px', left: '64px', fontSize: '14px',  fontWeight: '400'}}>Typical Manhattan Activity Map</div>\r\n\r\n        <Map\r\n          id=\"right-map\"\r\n          {...viewState}\r\n          padding={rightMapPadding}\r\n          onMoveStart={onRightMoveStart}\r\n          onMove={activeMap === 'right' ? onMove : undefined}\r\n          style={RightMapStyle}\r\n          mapStyle={mapStyle}\r\n          mapboxAccessToken={MAPBOX_ACCESS_TOKEN}\r\n          onLoad={map => onRightMapLoad(map)} // Added this line\r\n        />\r\n        <div className=\"split-view-map-label\" style={{top: '18px', right: '64px', fontSize: '14px', fontWeight: '400'}}>Event-Impacted Manhattan Activity Map</div>\r\n        \r\n        <SplitViewController\r\n          isSplitView={isSplitView}\r\n          setSplitView={setSplitView}\r\n        />\r\n\r\n        <DualMapTimelapse \r\n          leftMap={leftMapRef}\r\n          rightMap={rightMapRef}\r\n          eventBaselineHashMap={eventBaselineHashMap}\r\n          busynessHashMap={busynessHashMap}\r\n          baselineTimelapseData={baselineTimelapseData}\r\n          timelapseData={timelapseData}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SplitViewMap;"],"names":["_ref","isSplitView","setSplitView","_useMapContext","useMapContext","setEventForAnalysisComponent","setShowChart","neighbourhoodEvents","useEffect","length","_jsx","className","children","onClick","leftMap","rightMap","originalBusynessHashMap","timelapseData","baselineTimelapseData","busynessHashMap","updateLayerColours","_useState","useState","_useState2","_slicedToArray","isPlaying","setIsPlaying","_useState3","_useState4","elapsedTime","setElapsedTime","_useState5","_useState6","index","setIndex","_useState7","_useState8","setCurrentEvent","timerRef","useRef","pauseTimelapse","clearInterval","current","resetPosition","setTimeout","endTimelapse","Number","isInteger","hasOwnProperty","TimelapseHashMap","BaselineHashMap","_jsxs","setInterval","prevTime","FontAwesomeIcon","icon","faPause","style","color","faPlay","htmlFor","type","min","max","value","onChange","e","newElapsedTime","target","Math","floor","LeftMapStyle","position","width","height","RightMapStyle","left","eventBaselineHashMap","MAPBOX_ACCESS_TOKEN","renderNeighbourhoods","mapStyle","markers","_useMapContext3","colourPairs","colourPairIndex","neighbourhoods","leftMapRef","rightMapRef","popup","longitude","latitude","zoom","pitch","viewState","setViewState","mode","activeMap","setActiveMap","onLeftMoveStart","useCallback","onRightMoveStart","onMove","evt","window","innerWidth","leftMapPadding","useMemo","top","right","bottom","rightMapPadding","handleSplitScreenMouseInteractions","map","hashmap","colourScale","scaleLinear","domain","range","features","forEach","neighbourhood","on","id","getCanvas","cursor","setPaintProperty","queryRenderedFeatures","point","layers","markerRadius","popupOffsets","mapboxgl","offset","closeButton","closeOnClick","richText","zone","properties","score","textColour","setLngLat","lngLat","setHTML","concat","addTo","remove","onLeftMapLoad","event","console","log","onRightMapLoad","_Fragment","Map","_objectSpread","padding","onMoveStart","undefined","mapboxAccessToken","onLoad","fontSize","fontWeight","SplitViewController","DualMapTimelapse"],"sourceRoot":""}