{"version":3,"file":"static/js/515.bf6d319d.chunk.js","mappings":"mKA6BA,IA1BA,SAAsBA,GAA4C,IAKxCC,EALDC,EAAyBF,EAAzBE,0BACrBC,GADyDH,EAATI,WACVC,EAAAA,EAAAA,WAAS,IAAKC,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAA7CK,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAOlC,OACEI,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mCAAkCC,SAAA,EAC/CF,EAAAA,EAAAA,MAAA,OAAKG,MAAO,CAACC,QAAS,OAAQC,cAAe,MAAOC,WAAY,cAAcJ,SAAA,EAC5EF,EAAAA,EAAAA,MAAA,MAAIG,MAAO,CAACI,OAAQ,IAAKC,YAAa,OAAQC,UAAW,QAAQP,SAAA,CAAC,eAAaV,EAA0BkB,uBACzGV,EAAAA,EAAAA,MAAA,MAAIG,MAAO,CAACI,OAAQ,IAAKE,UAAW,QAAQP,SAAA,CAAC,cAAYV,EAA0BmB,wBAErFX,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CACGJ,GAVeP,EAUYC,EAA0BoB,sBATjDrB,EAAKsB,OAAS,IAAMtB,EAAKuB,UAAU,EAAG,KAAO,QAAUvB,GASmBC,EAA0BoB,uBACvGG,EAAAA,EAAAA,KAAA,QAAAb,SAAM,YACLV,EAA0BoB,sBAAsBC,OAAS,MACxDE,EAAAA,EAAAA,KAAA,QAAMZ,MAAO,CAACa,MAAO,QAASC,OAAQ,UAAWC,eAAgB,aAAcC,QAhB/D,WACtBpB,GAAgBD,EACpB,EAcoHI,SACvGJ,EAAc,YAAc,mBAM3C,C,kICOF,MA9BA,SAAwBR,GAAuC,IAApC8B,EAAK9B,EAAL8B,MAAOC,EAAoB/B,EAApB+B,qBAAsBC,EAAGhC,EAAHgC,IAEpDC,GAAwFC,EAAAA,EAAAA,KAAjFC,EAAgBF,EAAhBE,iBAAkBC,EAAqBH,EAArBG,sBAAuBC,EAAUJ,EAAVI,WAAYC,EAAaL,EAAbK,cAAeC,EAASN,EAATM,UAK3E,OACI7B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sCAAqCC,SAAA,EAChDa,EAAAA,EAAAA,KAAA,MAAIZ,MAAO,CAAC2B,UAAW,OAAO5B,SAAEkB,EAAMW,cACtChB,EAAAA,EAAAA,KAAA,KAAAb,SAAIkB,EAAMY,eACVjB,EAAAA,EAAAA,KAAA,UAAQd,UAAU,0BAA0BkB,QAAS,WACjDS,EAAcN,EAAIW,SAClBZ,EAAqBD,EAAMc,UAC3BT,GAAiB,GACjBC,EAAsBN,EAAMc,UAE5B,IAdkBC,EAcZC,GAdYD,EAcwBf,EAAMc,SAbjDG,EAAAA,EAAiBC,MAAK,SAACC,GAAO,OAAKA,EAAQC,WAAWC,WAAaN,CAAO,KAezEO,YAAW,WAAOf,EAAWL,EAAIW,QAASG,EACtC,GACJ,KAEA,IAAMO,EAAkBP,EAAaQ,SAASC,YAAYT,EAAaQ,SAASC,YAAYhC,OAAS,GACrGgB,EAAUP,EAAIW,QAASU,EAC3B,EAAEzC,SAAC,6BAGf,E,oBCEA,EA9BkB,SAAHZ,GAAqC,IAA/BwD,EAAKxD,EAALwD,MAAOC,EAAOzD,EAAPyD,QAAS5B,EAAO7B,EAAP6B,QACnC1B,GAAgCE,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAAxCuD,EAAQpD,EAAA,GAAEqD,EAAWrD,EAAA,GAE5B2B,GAAkDC,EAAAA,EAAAA,KAA3C0B,EAAiB3B,EAAjB2B,kBAAmBC,EAAoB5B,EAApB4B,qBAY1B,OACEnD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBC,SAAA,EACpCF,EAAAA,EAAAA,MAAA,OACEC,UAAS,mBAAAmD,OAAqBJ,EAAW,UAAY,IACrD7B,QAbgB,WACpB8B,GAAaD,GACbG,GAAsBD,GAElB/B,GACFA,GAEJ,EAM6BjB,SAAA,EAGvBa,EAAAA,EAAAA,KAAA,OAAKd,UAAU,YAAWC,SAAE4C,KAC5B/B,EAAAA,EAAAA,KAACsC,EAAAA,EAAe,CAACC,KAAMN,EAAWO,EAAAA,IAAcC,EAAAA,IAAerD,MAAO,CAAEsD,SAAU,aAEnFT,IAAYjC,EAAAA,EAAAA,KAAA,OAAKd,UAAU,oBAAmBC,SAAE6C,MAGvD,E,uCCxBAW,EAAAA,GAAQC,SACJC,EAAAA,GA+JA,MA5JJ,SAAwBtE,GAAW,IAARgC,EAAGhC,EAAHgC,IAErBC,GAAyFC,EAAAA,EAAAA,KAAlFqC,EAActC,EAAdsC,eAAgBC,EAAOvC,EAAPuC,QAASC,EAAmBxC,EAAnBwC,oBAAqBC,EAAMzC,EAANyC,OAAQC,EAAS1C,EAAT0C,UAAWC,EAAI3C,EAAJ2C,KAAMC,EAAO5C,EAAP4C,QAExEC,EAAQP,EAAeQ,SAGvBC,EAAcF,EAAM9C,KAAI,SAACF,GAAK,OAAKA,EAAMoB,WAAW0B,IAAI,IACxDK,EAAWH,EAAM9C,KAAI,SAACF,GAAK,OAAKA,EAAMoB,WAAWgC,WAAW,IAElE/E,GAAgDE,EAAAA,EAAAA,UAAS,KAAIC,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAAtDgF,EAAgB7E,EAAA,GAAE8E,EAAmB9E,EAAA,GAC5C+E,GAAoChF,EAAAA,EAAAA,UAAS,IAAGiF,GAAA/E,EAAAA,EAAAA,GAAA8E,EAAA,GAAzCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,GAA4BpF,EAAAA,EAAAA,UAAS,IAAGqF,GAAAnF,EAAAA,EAAAA,GAAAkF,EAAA,GAAjCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAExB1D,EAAIW,QAAQkD,iBAAiBnB,EAAS,QAAS,aAAc,GAE7D,IAAMoB,EAAkBd,EAAYhD,KAAI,SAAC4C,EAAMmB,GAAK,OAClDtE,EAAAA,EAAAA,KAAA,UAAoBuE,MAAOpB,EAAM,eAAcK,EAASc,GAAOnF,SAC5DgE,GADUmB,EAEJ,IAGLE,EAAQ,CAAC,CAAC,EAAE,IAAK,CAAC,GAAG,IAAK,CAAC,GAAG,IAAK,CAAC,GAAG,IAAK,CAAC,GAAG,IAAK,CAAC,GAAG,IAAK,CAAC,GAAG,IAAK,CAAC,GAAG,KAE3EC,EAAY,CAChBP,OAAQA,EACRQ,SAAU,CACR,CACEC,MAAO,iBACPC,KAAMd,EACNe,KAAM,CACFC,OAAQ,SACRC,MAAO,uBACPC,MAAO,wBAEXC,YAAa,0BACbC,QAAS,MAITC,EAAU,CACdC,YAAY,EACZC,qBAAqB,EACrBC,YAAa,EACbC,QAAS,CACPC,OAAQ,CACNnG,SAAS,GAEXoG,WAAY,CACVC,YAAa,CACXC,UAAW,CACTC,KAAM,OACNC,KAAM,WACNC,QAAS,IACTvB,MAAOC,EAAMzB,EAAU,GAAG,GAC1BkC,YAAa,0BACbc,YAAa,EACbpB,MAAO,CACL3C,QAAS,QACT3C,SAAS,EACT2G,SAAU,QACVC,gBAAiB,uBAGrBC,QAAS,CACPN,KAAM,OACNC,KAAM,WACNC,QAAS,IACTvB,MAAOC,EAAMzB,EAAU,GAAG,GAC1BkC,YAAa,0BACbc,YAAa,EACbpB,MAAO,CACL3C,QAAS,MACT3C,SAAS,EACT2G,SAAU,QACVC,gBAAiB,uBAGrBE,MAAO,CACLP,KAAM,OACNC,KAAM,aACNC,QAAS,IACTvB,MAAO,EACPU,YAAa,qBACbc,YAAa,MAMrBK,OAAQ,CACJC,EAAG,CACDC,KAAM,CACJrG,MAAO,aAETsG,MAAO,CACLtG,MAAO,YAGXuG,EAAG,CACDF,KAAM,CACJrG,MAAO,aAETsG,MAAO,CACLtG,MAAO,cA8BjB,OAxBAwG,EAAAA,EAAAA,YAAU,WAGR,IAAMC,EAAoB,GACpBC,EAAgB,GAEtB,IAAK,IAAIC,KAAO5D,EAAqB,CAEnC,IAAM6D,EAAuB7D,EAAoB4D,GAAK3D,GAChD6D,EAAmBF,EAEzBF,EAAkBK,KAA4B,IAAvBF,GACvBF,EAAcI,KAAKD,EACrB,CAEA/C,EAAc2C,GACdvC,EAAUwC,GAENjD,IAAqBT,GAAU1C,EAAIW,UACnCX,EAAIW,QAAQkD,iBAAiBV,EAAmB,QAAS,aAAc,GACvEC,EAAoBV,GAExB,GAAG,CAACA,EAAQD,EAAqBzC,EAAKmD,KAGtCzE,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EAEEa,EAAAA,EAAAA,KAAA,UAAQd,UAAU,wBAChBqF,MAAOpB,EACP6D,SAAU,SAACC,GAEP/D,EAAU+D,EAAEnC,OAAOK,QAAQ8B,EAAEnC,OAAOoC,eAAeC,QAAQC,QAC3DhE,EAAQ6D,EAAEnC,OAAOP,MACrB,EAAEpF,SAEDkF,KAGHrE,EAAAA,EAAAA,KAAA,OAAKd,UAAU,8BAA6BC,UAC1Ca,EAAAA,EAAAA,KAACqH,EAAAA,GAAI,CAAElC,QAASA,EAASP,KAAMH,QAIvC,EC6NJ,MA1XA,SAAqClG,GAAuG,IAApGgC,EAAGhC,EAAHgC,IAAK+G,EAAO/I,EAAP+I,QAASC,EAAehJ,EAAfgJ,gBAAiBC,EAAoBjJ,EAApBiJ,qBAAsBC,EAAOlJ,EAAPkJ,QAASC,EAAoBnJ,EAApBmJ,qBAAsBC,EAAYpJ,EAAZoJ,aAEjH7E,GAAkBrC,EAAAA,EAAAA,KAAlBqC,eACP8E,GAA6DnH,EAAAA,EAAAA,KAA7BoH,GAAhBD,EAATjJ,UAAuBiJ,EAAZE,aAAyBF,EAAXC,aAAaE,EAAYH,EAAZG,aACtCC,GAAsBvH,EAAAA,EAAAA,KAAtBuH,mBAEPtJ,GAAkDE,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAAzDuJ,EAAiBpJ,EAAA,GAAEqJ,EAAoBrJ,EAAA,GAC9C+E,GAAwChF,EAAAA,EAAAA,UAAS,MAAKiF,GAAA/E,EAAAA,EAAAA,GAAA8E,EAAA,GAA/CuE,EAAYtE,EAAA,GAAEuE,EAAevE,EAAA,GAKpCG,GAAsCpF,EAAAA,EAAAA,UAAS,MAAKqF,GAAAnF,EAAAA,EAAAA,GAAAkF,EAAA,GACpDqE,GADkBpE,EAAA,GAAgBA,EAAA,IACUrF,EAAAA,EAAAA,UAAS,KAAG0J,GAAAxJ,EAAAA,EAAAA,GAAAuJ,EAAA,GACxDE,GADqBD,EAAA,GAAmBA,EAAA,IACE1J,EAAAA,EAAAA,WAAS,IAAM4J,GAAA1J,EAAAA,EAAAA,GAAAyJ,EAAA,GAEzDE,GAFoBD,EAAA,GAAkBA,EAAA,IAEY/H,EAAAA,EAAAA,MAA3C0B,EAAiBsG,EAAjBtG,kBAIPuG,GAJ8CD,EAApBrG,sBAIQxD,EAAAA,EAAAA,UAAS,OAAK+J,GAAA7J,EAAAA,EAAAA,GAAA4J,EAAA,GAA9BE,GAAFD,EAAA,GAAcA,EAAA,IAE9BE,GAA0DjK,EAAAA,EAAAA,WAAS,GAAMkK,GAAAhK,EAAAA,EAAAA,GAAA+J,EAAA,GAAlEE,EAAqBD,EAAA,GAAEE,EAAwBF,EAAA,GACtDG,GAA4BrK,EAAAA,EAAAA,UAAS,IAAGsK,GAAApK,EAAAA,EAAAA,GAAAmK,EAAA,GAAjC/E,EAAMgF,EAAA,GAAE/E,EAAS+E,EAAA,GAExBC,GAA4BvK,EAAAA,EAAAA,WAAS,GAAKwK,GAAAtK,EAAAA,EAAAA,GAAAqK,EAAA,GAAnCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAAgD3K,EAAAA,EAAAA,WAAS,GAAM4K,GAAA1K,EAAAA,EAAAA,GAAAyK,EAAA,GAAxDE,GAAgBD,EAAA,GAAEE,GAAmBF,EAAA,IAuG5C/C,EAAAA,EAAAA,YAAU,WACN,IAAAkD,EArG6B,WAC7B,IAAKrC,EACL,MAAO,CAACsC,MAAO,GAAI9F,WAAY,IAG/B,IACI+F,EADEC,EAAUC,OAAOD,QAAQxC,GAG3ByB,GACJe,EAAQE,MAAK,SAACC,EAAGC,GAAC,OAAKA,EAAE,GAAKD,EAAE,EAAE,IAClCJ,EAAkBC,EAAQK,MAAM,EAAG,KAEnCL,EAAQE,MAAK,SAACC,EAAGC,GAAC,OAAKD,EAAE,GAAKC,EAAE,EAAE,IAClCL,EAAkBC,EAAQK,MAAM,EAAG,IAGnC,IAAMC,EAAkBL,OAAOM,YAAYR,GACrC/F,EAAasG,EAAkBL,OAAOO,OAAOF,GAAkB,GAOrE,MAAO,CAACR,MALMC,EAAgBtJ,KAAI,SAAAgK,GAAY,IAAV3D,GAAS9H,EAAAA,EAAAA,GAAAyL,EAAA,GAAN,GACjCC,EAAiB1H,EAAeQ,SAAS/B,MAAK,SAAAkJ,GAAa,OAAIA,EAAcC,KAAO9D,CAAG,IAC7F,OAAO4D,EAAiBA,EAAe/I,WAAW0B,KAAO,IACzD,IAEeW,WAAAA,EACnB,CA4EgC6G,GAArBf,EAAKD,EAALC,MAAO9F,EAAU6F,EAAV7F,WACdK,EAAUD,GACV,IAAM0G,EA3EY,SAAChB,EAAO9F,GAE1B,IAAMc,EAAO,CACTV,OAAQ0F,EACRlF,SAAU,CACN,CACIC,MAAO,qBACPkG,aAAc,GACdjG,KAAMd,EACNmC,gBAAiB,SAAC6E,GACd,IAAMC,EAAQD,EAAQC,MAEtB,OADoBA,EAAbC,UAIHF,EAAQG,WAAa,EACdlC,EAAwBmC,GAAwBH,GAASI,GAAyBJ,GAElF,QALA,IAOf,KAgDZ,MAAO,CAACnG,KAAAA,EAAMO,QA3CE,CACZE,qBAAqB,EACrBD,YAAY,EACZgG,UAAW,IACXhF,OAAQ,CACJC,EAAG,CACCgF,aAAa,EACb9E,MAAO,CACHtG,MAAO,QACPqL,KAAM,CACFC,KAAM,IAEVC,YAAa,GACbC,YAAa,IAEjBnF,KAAM,CACFjH,SAAS,IAGjBmH,EAAG,CACCnH,SAAS,EACTiH,KAAM,CACFjH,SAAS,KAIrBkG,QAAS,CACLC,OAAQ,CACJnG,SAAS,GAEbqM,QAAS,CAAC,EACV3J,MAAO,CACH1C,SAAS,EACTb,KAAM,qBACNyB,MAAO,QACPqL,KAAM,CACFC,KAAM,GACNI,OAAQ,SAEZC,MAAO,YAKvB,CAMyBC,CAAcjC,EAAO9F,GAC1C8E,EAAagC,EACjB,GAAG,CAAC7B,EAAuBzB,IAG3B,IAAM4D,GAA0B,SAACJ,GAC7B,IAAOgB,EAAoChB,EAApCgB,IAAGC,EAAiCjB,EAA/BE,UAAagB,EAAGD,EAAHC,IAAKC,EAAMF,EAANE,OACxBC,EAAkBJ,EAAIK,qBAAqB,EAAGH,EAAK,EAAGC,GAG5D,OAFAC,EAAgBE,aAAa,EAAG3E,EAAQ,IACxCyE,EAAgBE,aAAa,EAAG3E,EAAQ,IACjCyE,CACX,EAEMf,GAA2B,SAACL,GAC9B,IAAOgB,EAAoChB,EAApCgB,IAAGO,EAAiCvB,EAA/BE,UAAagB,EAAGK,EAAHL,IAAKC,EAAMI,EAANJ,OACxBC,EAAkBJ,EAAIK,qBAAqB,EAAGH,EAAK,EAAGC,GAG5D,OAFAC,EAAgBE,aAAa,EAAG3E,EAAQ,IACxCyE,EAAgBE,aAAa,EAAG3E,EAAQ,IACjCyE,CACX,EAQMI,GAAqB,WACvBhD,GAAWD,EACf,GAEA5C,EAAAA,EAAAA,YAAU,WATNuB,EAAmBzH,EAAIW,SAAUmI,EAAQ7B,EAAsBD,GAC/DI,IACAqB,GAA0BD,EAS9B,GAAG,CAACM,KAoHJ5C,EAAAA,EAAAA,YAAU,WAnBgB,IAAlBvC,EAAOpE,SAKPqI,IAAiBF,GAEjBN,IACAK,EAAmBzH,EAAIW,SAAS,EAAOsG,EAAsBD,GAC7DW,EAAqB,MACrBE,EAAgB,QAGhBF,EAAqBC,GACrBT,EAAqBxD,IAO7B,GAAG,CAACA,IAEJ,IAKQqI,GAAgB,CAEpB,CACExK,MAAO,8BACPC,SAAShC,EAAAA,EAAAA,KAACwM,EAAe,CAACjM,IAAOA,IACjCkM,mBAAoB,kBAAM/C,IAAqBD,GAAiB,GAElE,CACC1H,MAAO,kBACPC,SACA/C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qCAAoCC,SAAA,EAChDF,EAAAA,EAAAA,MAAA,OAAKC,UAAS,4BAAAmD,OAA+C,kBAAjB8F,EAAmC,UAAY,IAAMpG,MAAM,0BAA0B3B,QAAS,WAAO+D,EAnFjI,WAEpB,IAAKoD,EACD,MAAO,GAGX,IAEIsC,EAFEC,EAAUC,OAAOD,QAAQvC,GAI/BuC,EAAQE,MAAK,SAACC,EAAGC,GAAC,OAAKA,EAAE,GAAKD,EAAE,EAAE,IAElCJ,EAAkBC,EAAQK,MAAM,EAAG,GAEnC,IAAMC,EAAkBL,OAAOM,YAAYR,GAG3C,OAFuBO,EAAkBL,OAAO2C,KAAKtC,GAAmB,EAI5E,CAgEmKuC,IAAoBvE,EAAgB,gBAAgB,EAAEjJ,SAAA,EAC7Ma,EAAAA,EAAAA,KAACsC,EAAAA,EAAe,CAACC,KAAMqK,EAAAA,OACvB5M,EAAAA,EAAAA,KAAA,QAAMZ,MAAO,CAAEsD,SAAU,QAASvD,SAAC,kBAEvCF,EAAAA,EAAAA,MAAA,OAAKC,UAAS,4BAAAmD,OAA+C,qBAAjB8F,EAAsC,UAAY,IAAMpG,MAAM,6BAA6B3B,QAAS,WAAO+D,EAlEtI,WAErB,IAAKoD,EACD,MAAO,GAGX,IAEIsC,EAFEC,EAAUC,OAAOD,QAAQvC,GAI/BuC,EAAQE,MAAK,SAACC,EAAGC,GAAC,OAAKD,EAAE,GAAKC,EAAE,EAAE,IAElCL,EAAkBC,EAAQK,MAAM,EAAG,GAEnC,IAAMC,EAAkBL,OAAOM,YAAYR,GAG3C,OAFuBO,EAAkBL,OAAO2C,KAAKtC,GAAmB,EAI5E,CA+CyKyC,IAAqBzE,EAAgB,mBAAmB,EAAEjJ,SAAA,EACvNa,EAAAA,EAAAA,KAACsC,EAAAA,EAAe,CAACC,KAAMuK,EAAAA,OACvB9M,EAAAA,EAAAA,KAAA,QAAMZ,MAAO,CAAEsD,SAAU,QAASvD,SAAE,mBAExCF,EAAAA,EAAAA,MAAA,OAAKC,UAAS,4BAAAmD,OAA+C,wBAAjB8F,EAAyC,UAAY,IAAMpG,MAAM,yCAAyC3B,QAAS,WAAO+D,EA5IjJ,WAEzB,IAAKmD,EACD,MAAO,GAGX,IAEIuC,EAFEC,EAAUC,OAAOD,QAAQxC,GAI/BwC,EAAQE,MAAK,SAACC,EAAGC,GAAC,OAAKA,EAAE,GAAKD,EAAE,EAAE,IAMlCJ,GAHAA,EAAkBC,EAAQiD,QAAO,SAACC,GAAK,OAAKA,EAAM,IAAM,GAAI,KAG1B7C,MAAM,EAAG,GAE3C,IAAMC,EAAkBL,OAAOM,YAAYR,GAG3C,OAFuBO,EAAkBL,OAAO2C,KAAKtC,GAAmB,EAG5E,CAsHwL6C,IAAyB7E,EAAgB,sBAAsB,EAAEjJ,SAAA,EAC7Oa,EAAAA,EAAAA,KAACsC,EAAAA,EAAe,CAACC,KAAM2K,EAAAA,OACvBlN,EAAAA,EAAAA,KAAA,QAAMZ,MAAO,CAAEsD,SAAU,QAASvD,SAAC,sBAEvCF,EAAAA,EAAAA,MAAA,OAAKC,UAAS,4BAAAmD,OAA+C,yBAAjB8F,EAA0C,UAAY,IAAOpG,MAAM,0CAA0C3B,QAAS,WAAO+D,EAxHnJ,WAE1B,IAAKmD,EACD,MAAO,GAGX,IAEIuC,EAFEC,EAAUC,OAAOD,QAAQxC,GAI/BwC,EAAQE,MAAK,SAACC,EAAGC,GAAC,OAAKD,EAAE,GAAKC,EAAE,EAAE,IAGlCL,EAAkBC,EAAQiD,QAAO,SAACC,GAAK,OAAKA,EAAM,KAAO,GAAI,IAK7D,IAAM5C,EAAkBL,OAAOM,YAAYR,GAG3C,OAFuBO,EAAkBL,OAAO2C,KAAKtC,GAAmB,EAI5E,CAiG2L+C,IAA0B/E,EAAgB,uBAAuB,EAAEjJ,SAAA,EAClPa,EAAAA,EAAAA,KAACsC,EAAAA,EAAe,CAACC,KAAM6K,EAAAA,OACvBpN,EAAAA,EAAAA,KAAA,QAAMZ,MAAO,CAAEsD,SAAU,QAASvD,SAAC,2BAM7C,OACEF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EACrCa,EAAAA,EAAAA,KAAA,OAAKd,UAAU,mBAAkBC,SAC9BoN,GAAchM,KAAI,SAAA8M,EAAgDC,GAAO,IAApDhJ,EAAK+I,EAAL/I,MAAOvC,EAAKsL,EAALtL,MAAOC,EAAOqL,EAAPrL,QAASyK,EAAkBY,EAAlBZ,mBAE3C,OAAU,IAANa,GAEAtN,EAAAA,EAAAA,KAACuN,EAAe,CAAaxL,MAAOA,EAAOC,QAASA,EAASsC,MAAOA,EAAOlE,QAASqM,GAA9D1K,GAKhB,IAANuL,GAAY7D,GAMT,MAJHzJ,EAAAA,EAAAA,KAACuN,EAAe,CAAaxL,MAAOA,EAAOC,QAASA,EAASsC,MAAOA,GAA9CvC,EAK5B,OAGA0H,KAAqBtH,IACrBlD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wCAAuCC,SAAA,EACpDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3Ba,EAAAA,EAAAA,KAAA,SACE4F,KAAK,QACL4H,KAAK,kBACLjJ,MAAM,mBACNmG,GAAG,mBACH+C,SAAUpE,EACVrC,SAAUsF,MAEZtM,EAAAA,EAAAA,KAAA,SAAO0N,QAAQ,mBAAkBvO,SAAC,cAGlCa,EAAAA,EAAAA,KAAA,SACE4F,KAAK,QACL4H,KAAK,kBACLjJ,MAAM,cACNmG,GAAG,cACH+C,QAASpE,EACTrC,SAAUsF,MAEZtM,EAAAA,EAAAA,KAAA,SAAO0N,QAAQ,cAAavO,SAAC,qBAI/Ba,EAAAA,EAAAA,KAAA,UAAQd,UAAU,0BAA0BkB,QAAS,kBAAM2H,GAAcF,EAAY,EAAC1I,SACnF0I,EAAc,gBAAkB,qCAMjD,E,oBCtOA,MAjJA,SAA8BtJ,GAAiN,IAA9MgC,EAAGhC,EAAHgC,IAAKD,EAAoB/B,EAApB+B,qBAAsBoH,EAAoBnJ,EAApBmJ,qBAAsBiG,EAAuBpP,EAAvBoP,wBAAyBnG,EAAoBjJ,EAApBiJ,qBAAsBD,EAAehJ,EAAfgJ,gBAAiBqG,EAAmBrP,EAAnBqP,oBAAqBnG,EAAOlJ,EAAPkJ,QAASE,EAAYpJ,EAAZoJ,aAAcK,EAAkBzJ,EAAlByJ,mBAAoB6F,EAAyBtP,EAAzBsP,0BAEhNrN,GAAmKC,EAAAA,EAAAA,KAA5JqN,EAAWtN,EAAXsN,YAAaC,EAAavN,EAAbuN,cAAepP,EAAS6B,EAAT7B,UAAWqP,EAAuBxN,EAAvBwN,wBAAyBC,EAAmBzN,EAAnByN,oBAAqBC,EAAW1N,EAAX0N,YAAaC,EAAe3N,EAAf2N,gBAAiBtN,EAAaL,EAAbK,cAAeuN,EAAsB5N,EAAtB4N,uBAEzIxG,GAAiFnH,EAAAA,EAAAA,KAA1EwC,EAAM2E,EAAN3E,OAAQC,EAAS0E,EAAT1E,UAAWmL,EAASzG,EAATyG,UAAWC,EAAY1G,EAAZ0G,aAAcnL,EAAIyE,EAAJzE,KAAMC,EAAOwE,EAAPxE,QAASmL,EAAW3G,EAAX2G,YAElEC,GAAqF/N,EAAAA,EAAAA,KAA9EgO,EAAcD,EAAdC,eAAgBC,EAA0BF,EAA1BE,2BAA4B5G,EAAY0G,EAAZ1G,aAAcpH,EAAgB8N,EAAhB9N,iBAEjE+H,GAAiHhI,EAAAA,EAAAA,KAA1GqC,EAAc2F,EAAd3F,eAAgB6L,EAAWlG,EAAXkG,YAAaC,EAAWnG,EAAXmG,YAAaC,EAAsBpG,EAAtBoG,uBAAwBC,EAAcrG,EAAdqG,eAAgBC,EAAoBtG,EAApBsG,qBAEzFC,GAAkEvO,EAAAA,EAAAA,KAA3DhC,EAAyBuQ,EAAzBvQ,0BAA2BwQ,GAA4BD,EAA5BC,6BAE1BC,IAA0BzO,EAAAA,EAAAA,KAA1ByO,sBAERxQ,IAAgCE,EAAAA,EAAAA,UAAS,MAAKC,IAAAC,EAAAA,EAAAA,GAAAJ,GAAA,GAAvCyQ,GAAQtQ,GAAA,GAAEuQ,GAAWvQ,GAAA,GAC5B+E,IAAoChF,EAAAA,EAAAA,UAAS,MAAKiF,IAAA/E,EAAAA,EAAAA,GAAA8E,GAAA,GAA3CyL,GAAUxL,GAAA,GAAEyL,GAAazL,GAAA,IAuBhC4C,EAAAA,EAAAA,YAAU,WACLwH,GAAuBA,EAAoBnO,OAAS,IACrDoD,EAAU+K,EAAoB,GAAGsB,SACjCjB,EAAaL,EAAoB,GAAGjN,YACpCoC,EAAQ6K,EAAoB,GAAGuB,WAC/BP,GAA6BhB,EAAoB,IAGrD,GAAG,CAACA,KAEJxH,EAAAA,EAAAA,YAAU,WACR,IAAMgJ,GAAcC,EAAAA,EAAAA,KAAcC,OAAO,CAAC,EAAG,GAAK,KAAMC,MAAM1B,EAAYC,IACpE0B,EAAwBtB,EAAc/G,EAAqBvE,GAAUsE,EAAgBtE,GACrF6M,EAASL,EAAYI,GAC3BP,GAAcQ,GAWdV,GATIS,EAAwB,IACjB,gBACAA,GAAyB,KAAQA,EAAwB,GACzD,kBACAA,GAAyB,IAAOA,EAAwB,GACxD,OAEA,iBAGb,GAAG,CAAC3B,EAAaC,EAAiB5G,EAAiBC,EAAsBvE,IAEzE,IAAM8M,GAAa9B,EAAsBA,EAAoB1N,KAAI,SAACF,EAAOiN,GACvE,OACEtN,EAAAA,EAAAA,KAACgQ,EAAe,CAEd3P,MAAOA,EACPC,qBAAsBA,EACtBC,IAAKA,GAHE+M,EAMb,IAAK,KAwDE2C,IAAgBxP,EAAAA,EAAAA,KAAhBwP,aAEP,OACGnC,GAAeE,KACd/O,EAAAA,EAAAA,MAAA,OAAKC,UAAS,qBAAAmD,OAAuB4N,GAAe,OAAS,IAAK9Q,SAAA,EAxDlEF,EAAAA,EAAAA,MAAA,OAAKG,MAAO,CAACC,QAAS,OAAQE,WAAY,OAAQ2Q,MAAO,QAAQ/Q,SAAA,EAC/Da,EAAAA,EAAAA,KAAA,UAAQd,UAAU,uCAAuCkB,QAAS,WAChES,EAAcN,EAAIW,SA9DT,SAACX,GAChB2O,IAAsB,GACtBd,GAAuB,GACvBW,GAAqB,GACrBN,GAAe,GACfC,GAA2B,GAC3BhO,GAAiB,GACjBoH,GAAa,GACb+G,EAAuB,IACvBC,EAAevO,EAAIW,SACnBX,EAAIW,QAAQiP,MAAM,CAACC,KAAM,GAAIC,WAAW,EAAMC,OAAQ,CAAC1B,EAAaD,KACpE3G,EAAmBzH,EAAIW,SAAS,EAAMyM,EAAyBpG,GAC/DzE,EAAeQ,SAASiN,SAAQ,SAAC9F,GAC/BlK,EAAIW,QAAQkD,iBAAiBqG,EAAcC,GAAI,eAAgB,IAC/DnK,EAAIW,QAAQkD,iBAAiBqG,EAAcC,GAAK,QAAS,aAAc,EACzE,IACAmD,EAA0B3M,SAAU,CACtC,CA8CQsP,CAASjQ,EACX,EAAEpB,UACAa,EAAAA,EAAAA,KAACsC,EAAAA,EAAe,CAACC,KAAMkO,EAAAA,SAEzBzQ,EAAAA,EAAAA,KAAA,MAAId,UAAU,uCAAsCC,SAC/C4O,EAAgBM,EAAYlL,OAQhC4K,EAIEpP,EAAY,MAAOqB,EAAAA,EAAAA,KAAC0Q,EAAAA,EAAa,CAACjS,0BAA2BA,KAH3DQ,EAAAA,EAAAA,MAAA,MAAIG,MAAO,CAAC8Q,MAAO,QAAQhR,UAAU,oDAAmDC,SAAA,CAAC,IAAEgE,EAAK,QAAInD,EAAAA,EAAAA,KAAA,QAAMZ,MAAO,CAAEa,MAAOoP,IAAalQ,SAAEgQ,QAQ7IrB,EAIDC,GAEA/N,EAAAA,EAAAA,KAAC2Q,EAA4B,CAC3BpQ,IAAKA,EACL+G,QAASsG,EACTrG,gBAAiBA,EACjBC,qBAAsBA,EACtBC,QAASA,EACTC,qBAAsBA,EACtBzE,OAAQA,EACR0E,aAAcA,IAKboI,GAlBE,KAuBF/B,IAA2BhO,EAAAA,EAAAA,KAAA,KAAAb,SAAG,2DAezC,C","sources":["components/EventAnalysis.js","components/MobileEventCard.js","components/MobileAccordion.js","components/MobileLineChart.js","components/MobileNeighbourhoodChartData.js","components/MobileFloatingInfoBox.js"],"sourcesContent":["import React, {useState} from 'react';\r\nimport \"../App.css\";\r\n\r\nfunction EventAnalysis({ eventForAnalysisComponent, showChart }) {\r\n    const [isTextShort, setIsTextShort] = useState(true);\r\n    const toggleIsTextShort = () => {\r\n        setIsTextShort(!isTextShort);\r\n    };\r\n    const getShortText = (text) => {\r\n        return text.length > 200 ? text.substring(0, 200) + \"...  \" : text;\r\n    };\r\n    return (\r\n      <div className='floating-info-box-event-analysis'>\r\n        <div style={{display: 'flex', flexDirection: 'row', alignItems: 'flex-start'}}>\r\n          <h5 style={{margin: '0', marginRight: '1rem', textAlign: 'left'}}>Start Time: {eventForAnalysisComponent.Event_Impact_Start}</h5>\r\n          <h5 style={{margin: '0', textAlign: 'left'}}> End Time: {eventForAnalysisComponent.Event_Impact_End}</h5>\r\n        </div>\r\n        <p>\r\n          {isTextShort ? getShortText(eventForAnalysisComponent.Event_Impact_Analysis) : eventForAnalysisComponent.Event_Impact_Analysis}\r\n            <span>       </span>\r\n            {eventForAnalysisComponent.Event_Impact_Analysis.length > 200 &&\r\n              <span style={{color: 'white', cursor: 'pointer', textDecoration: 'underline'}} onClick={toggleIsTextShort}>\r\n                {isTextShort ? 'Show more' : 'Show less'}\r\n              </span>\r\n            }\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\nexport default EventAnalysis","import React from 'react';\r\nimport \"../App.css\";\r\nimport { useMapContext } from './MapContext';\r\nimport antline from '../geodata/antline.geo.json'\r\n\r\nfunction MobileEventCard ({event, visualiseEventImpact, map}) {\r\n\r\n    const {setShowChartData, removeAllButOneMarker, addAntline, removeAntline, addMarker} = useMapContext();\r\n    const findAntlineEventById = (eventId) => {\r\n        return antline.features.find((feature) => feature.properties.event_id === eventId);\r\n      };\r\n    \r\n    return (\r\n        <div className='floating-info-box-event-card-mobile'>\r\n            <h2 style={{marginTop: '0px'}}>{event.Event_Name}</h2>\r\n            <p>{event.description}</p>\r\n            <button className='floating-nav-cta-button' onClick={() => {\r\n                removeAntline(map.current)\r\n                visualiseEventImpact(event.Event_ID);\r\n                setShowChartData(true)\r\n                removeAllButOneMarker(event.Event_ID)\r\n\r\n                const antlineEvent = findAntlineEventById(event.Event_ID);\r\n\r\n                setTimeout(() => {addAntline(map.current, antlineEvent)\r\n                    },\r\n                1000)\r\n                \r\n                const lastCoordinates = antlineEvent.geometry.coordinates[antlineEvent.geometry.coordinates.length - 1];\r\n                addMarker(map.current, lastCoordinates);\r\n            }}>Visualise Event Impact</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MobileEventCard","import React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronDown, faChevronUp} from '@fortawesome/free-solid-svg-icons';\r\nimport { useMapContext } from './MapContext';\r\n\r\nconst Accordion = ({ title, content, onClick }) => {\r\n  const [isActive, setIsActive] = useState(false);\r\n\r\n  const {isAccordionActive, setIsAccordionActive} = useMapContext();\r\n\r\n\r\n  const handleOnClick = () => {\r\n    setIsActive(!isActive);\r\n    setIsAccordionActive(!isAccordionActive); // Toggle the parent's state directly\r\n    // Call the onClick prop if provided\r\n    if (onClick) {\r\n      onClick();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"accordion-item-mobile\">\r\n      <div\r\n        className={`accordion-title ${isActive ? 'pressed' : ''}`}\r\n        onClick={handleOnClick}\r\n        \r\n      >\r\n        <div className=\"acc-title\">{title}</div>\r\n        <FontAwesomeIcon icon={isActive ? faChevronUp : faChevronDown} style={{ fontSize: '12px' }} />\r\n      </div>\r\n      {isActive && <div className=\"accordion-content\">{content}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Accordion;\r\n","import React, {useState, useEffect} from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport 'chart.js/auto';\r\nimport {\r\n    Chart as ChartJS,\r\n  } from \"chart.js\";\r\nimport { useMapContext } from './MapContext';\r\nimport annotationPlugin from \"chartjs-plugin-annotation\";\r\n\r\nChartJS.register(\r\n    annotationPlugin\r\n  );\r\n\r\nfunction MobileLineChart ({map})  {\r\n\r\n      const {neighbourhoods, eventID, eventComparisonData, zoneID, setZoneID, zone, setZone} = useMapContext();\r\n  \r\n      const zones = neighbourhoods.features;\r\n      \r\n      // Extract the 'zone' property from each object in the `features` array\r\n      const zoneOptions = zones.map((event) => event.properties.zone);\r\n      const zoneKeys = zones.map((event) => event.properties.location_id);\r\n    \r\n      const [prevSelectedZone, setPrevSelectedZone] = useState('4');\r\n      const [dataValues, setDataValues] = useState([]);\r\n      const [labels, setLabels] = useState([]);\r\n\r\n      map.current.setPaintProperty(zoneID + '-line', 'line-width', 4);\r\n\r\n      const dropDownOptions = zoneOptions.map((zone, index) => (\r\n        <option key={index} value={zone} data-zone-id={zoneKeys[index]}>\r\n          {zone}\r\n        </option>\r\n      ));\r\n\r\n      const times = [[9,12], [19,22], [11,17], [12,17], [18,23], [13,16], [11,13], [20,22]];\r\n\r\n      const chartData = {\r\n        labels: labels,\r\n        datasets: [\r\n          {\r\n            label: 'Busyness Score',\r\n            data: dataValues,\r\n            fill: {\r\n                target: 'origin', // Fill area below the line and above y=0\r\n                above: 'rgba(255, 0, 0, 0.4)', // Red color above y=0\r\n                below: 'rgba(0, 255, 0, 0.4)', // Green color below y=0\r\n              },\r\n            borderColor: 'rgb(255, 255, 255, 0.7)',\r\n            tension: 0.1,\r\n          }\r\n        ]\r\n};\r\n      const options = {\r\n        responsive: true,\r\n        maintainAspectRatio: false, \r\n        aspectRatio: 4,\r\n        plugins: {\r\n          legend: {\r\n            display: false, // add this line\r\n          },\r\n          annotation: {\r\n            annotations: {\r\n              startLine: {\r\n                type: 'line', // Use 'line' for line annotation\r\n                mode: 'vertical', // 'vertical' to create a vertical line\r\n                scaleID: 'x', // Use 'x' scale for x-axis\r\n                value: times[eventID - 1][0], // Value where the line will be drawn (start time)\r\n                borderColor: 'rgba(255, 99, 132, 0.9)', // Color of the line\r\n                borderWidth: 2, // Width of the line\r\n                label: {\r\n                  content: 'Start', // Label text for the line\r\n                  display: true, // Show the label\r\n                  position: 'start',\r\n                  backgroundColor: 'rgba(255, 99, 132)'\r\n                },\r\n              },\r\n              endLine: {\r\n                type: 'line', // Use 'line' for line annotation\r\n                mode: 'vertical', // 'vertical' to create a vertical line\r\n                scaleID: 'x', // Use 'x' scale for x-axis\r\n                value: times[eventID - 1][1], // Value where the line will be drawn (end time)\r\n                borderColor: 'rgba(255, 99, 132, 0.9)', // Color of the line\r\n                borderWidth: 2, // Width of the line\r\n                label: {\r\n                  content: 'End', // Label text for the line\r\n                  display: true, // Show the label\r\n                  position: 'start',\r\n                  backgroundColor: 'rgba(255, 99, 132)'\r\n                }\r\n            },\r\n              line1: {\r\n                type: 'line', // Use 'line' for line annotation\r\n                mode: 'horizontal', // 'horizontal' to create a horizontal line\r\n                scaleID: 'y', // Use 'y' scale for y-axis\r\n                value: 0, // Value where the line will be drawn (y=0)\r\n                borderColor: 'rgba(0, 0, 0, 0.7)', // Color of the line\r\n                borderWidth: 2, // Width of the line\r\n              },\r\n            }\r\n          }\r\n        },\r\n        \r\n        scales: {\r\n            x: {\r\n              grid: {\r\n                color: '#D3D3D310', // change the grid line color for x-axis\r\n              },\r\n              ticks: {\r\n                color: '#D3D3D3', // change the label (text) color for x-axis\r\n              },\r\n            },\r\n            y: {\r\n              grid: {\r\n                color: '#D3D3D310', // change the grid line color for y-axis\r\n              },\r\n              ticks: {\r\n                color: '#D3D3D3', // change the label (text) color for y-axis\r\n              },\r\n            },\r\n          },\r\n      };\r\n\r\n      useEffect(() => {\r\n        \r\n        // Update the chart data whenever the selectedZone state changes\r\n        const updatedDataValues = [];\r\n        const updatedLabels = [];\r\n        \r\n        for (let key in eventComparisonData) {\r\n\r\n          const currentBusynessValue = eventComparisonData[key][zoneID];\r\n          const currentTimeValue = key;\r\n        \r\n          updatedDataValues.push(currentBusynessValue * 100); \r\n          updatedLabels.push(currentTimeValue);\r\n        }\r\n\r\n        setDataValues(updatedDataValues);\r\n        setLabels(updatedLabels);\r\n\r\n        if (prevSelectedZone !== zoneID && map.current) {\r\n            map.current.setPaintProperty(prevSelectedZone + '-line', 'line-width', 0); // Set to the default line width\r\n            setPrevSelectedZone(zoneID); // Update the previously selected zone\r\n          }\r\n        }, [zoneID, eventComparisonData, map, prevSelectedZone]);\r\n\r\n      return (\r\n        <div>\r\n            \r\n          <select className='floating-nav-dropdown'\r\n            value={zone}\r\n            onChange={(e) => {\r\n                \r\n                setZoneID(e.target.options[e.target.selectedIndex].dataset.zoneId);\r\n                setZone(e.target.value);\r\n            }}\r\n          >\r\n            {dropDownOptions}\r\n          </select>\r\n    \r\n          <div className='line-chart-container-mobile'>\r\n            <Line  options={options} data={chartData}/>\r\n          </div>\r\n        </div>\r\n      );\r\n    };\r\n\r\n    \r\n    export default MobileLineChart;","import React, {useState, useEffect} from 'react';\r\nimport MobileAccordion from './MobileAccordion';\r\nimport MobileLineChart from './MobileLineChart';\r\nimport 'chart.js/auto';\r\nimport \"../App.css\";\r\nimport { useMapContext } from './MapContext';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowTrendDown, faArrowTrendUp, faWineGlass, faWineGlassEmpty} from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction MobileNeighbourhoodChartData({ map, hashMap, busynessHashMap, eventBaselineHashMap, colours, highlightEventImpact, resetColours}) {\r\n\r\n    const {neighbourhoods} = useMapContext();\r\n    const {showChart, setShowChart, isSplitView, setSplitView} = useMapContext();\r\n    const {updateLayerColours} = useMapContext()\r\n\r\n    const [lastButtonPressed, setLastButtonPressed] = useState(null);\r\n    const [activeButton, setActiveButton] = useState(null);\r\n\r\n    // This state holds the data and options that the chart component needs to create the chart on the page. \r\n    // When this state changes, it triggers the chart to re-render with the new data and options.\r\n    \r\n    const [renderChart, setRenderChart] = useState(null);\r\n    const [selectedValues, setSelectedValues] = useState([]);\r\n    const [showLineChart, setShowLineChart] = useState(false);\r\n\r\n    const {isAccordionActive, setIsAccordionActive} = useMapContext();\r\n    \r\n    // This state holds a separate copy of the data and options for a chart. \r\n    // This copy isn't used directly in rendering but is useful for storing temporary or intermediary states of the chart's data and options.\r\n    const [chartData, setChartData] = useState(null);\r\n\r\n    const [showMostImpactedZones, setShowMostImpactedZones] = useState(false);  // New state for the toggle\r\n    const [labels, setLabels] = useState([]);    \r\n\r\n    const [active, setActive] = useState(true);\r\n    const [isChartDisplayed, setIsChartDisplayed] = useState(false);\r\n\r\n    // This function will handle sorting and extraction of names and data values\r\n    const getImpactedZonesForChart = () => {\r\n        if (!hashMap) {\r\n        return {names: [], dataValues: []};\r\n        }\r\n    \r\n        const entries = Object.entries(hashMap);\r\n        let filteredEntries;\r\n    \r\n        if (showMostImpactedZones) {\r\n        entries.sort((a, b) => b[1] - a[1]);\r\n        filteredEntries = entries.slice(0, 5);\r\n        } else {\r\n        entries.sort((a, b) => a[1] - b[1]);\r\n        filteredEntries = entries.slice(0, 5);\r\n        }\r\n    \r\n        const filteredHashMap = Object.fromEntries(filteredEntries);\r\n        const dataValues = filteredHashMap ? Object.values(filteredHashMap): [];\r\n    \r\n        const names = filteredEntries.map(([key]) => {\r\n        const matchingObject = neighbourhoods.features.find(neighbourhood => neighbourhood.id === key);\r\n        return matchingObject ? matchingObject.properties.zone : null;\r\n        });\r\n    \r\n        return {names, dataValues};\r\n    }\r\n\r\n    // function used to make the chart data\r\n    const makeChartData = (names, dataValues) => {\r\n    \r\n        const data = {\r\n            labels: names,\r\n            datasets: [\r\n                { \r\n                    label: 'Change in Busyness',\r\n                    barThickness: 24,\r\n                    data: dataValues,\r\n                    backgroundColor: (context) => {\r\n                        const chart = context.chart;\r\n                        const {chartArea} = chart;\r\n                        if (!chartArea){\r\n                            return null\r\n                        }\r\n                        if (context.dataIndex >= 0){\r\n                            return showMostImpactedZones ? getGradientMostImpacted(chart) : getGradientLeastImpacted(chart);\r\n                        } else{\r\n                            return 'white'\r\n                        }\r\n                    },\r\n                },\r\n            ],\r\n        };\r\n    \r\n        const options = {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            indexAxis: 'x',\r\n            scales: {\r\n                x: {\r\n                    beginAtZero: true,\r\n                    ticks: {\r\n                        color: 'white',\r\n                        font: {\r\n                            size: 10,\r\n                        },\r\n                        maxRotation: 45,\r\n                        minRotation: 45\r\n                    },\r\n                    grid: {\r\n                        display: false // hides gridlines along the x-axis\r\n                    },\r\n                },\r\n                y: { \r\n                    display: false, // hides the y-axis\r\n                    grid: {\r\n                        display: false // hides gridlines along the y-axis\r\n                    }\r\n                }\r\n            },\r\n            plugins: {\r\n                legend: {\r\n                    display: false,\r\n                },\r\n                tooltip: {},\r\n                title: {\r\n                    display: true,\r\n                    text: 'Change in Busyness',\r\n                    color: 'white',  // Set title color\r\n                    font: {\r\n                        size: 14,  // Set font size\r\n                        family: 'Arial'  // Set font family\r\n                    },\r\n                    align: 'center'  // center alignment\r\n            },\r\n        },\r\n    };\r\n        return {data, options};\r\n    }\r\n    \r\n    // Trigger chart rerender whenever showMostImpacted state changes\r\n    useEffect(() => {\r\n        const {names, dataValues} = getImpactedZonesForChart();\r\n        setLabels(labels); // Set labels here\r\n        const newChartData = makeChartData(names, dataValues);\r\n        setChartData(newChartData); // Set chartData here\r\n    }, [showMostImpactedZones, hashMap]);\r\n\r\n    // legacy code\r\n    const getGradientMostImpacted = (context) => {\r\n        const {ctx, chartArea: { top, bottom } } = context;\r\n        const gradientSegment = ctx.createLinearGradient(0, top, 0, bottom);\r\n        gradientSegment.addColorStop(0, colours[2]);\r\n        gradientSegment.addColorStop(1, colours[1]);\r\n        return gradientSegment;\r\n    };\r\n    \r\n    const getGradientLeastImpacted = (context) => {\r\n        const {ctx, chartArea: { top, bottom } } = context;\r\n        const gradientSegment = ctx.createLinearGradient(0, top, 0, bottom);\r\n        gradientSegment.addColorStop(0, colours[1]);\r\n        gradientSegment.addColorStop(1, colours[0]);\r\n        return gradientSegment;\r\n    }\r\n\r\n    const handleToggle = () => {\r\n        updateLayerColours(map.current, !active, eventBaselineHashMap, busynessHashMap);\r\n        resetColours();\r\n        setShowMostImpactedZones(!showMostImpactedZones)\r\n    };\r\n\r\n    const handleOptionChange = () => {\r\n        setActive(!active); \r\n    };\r\n\r\n    useEffect(() => {\r\n        handleToggle();\r\n    }, [active]);\r\n\r\n    // new function introduced by harry for buttons to filter map:\r\n\r\n    const getMostImpactedZones = () => {\r\n\r\n        if (!hashMap) {\r\n            return [];\r\n        }\r\n\r\n        const entries = Object.entries(hashMap);\r\n\r\n        let filteredEntries;\r\n\r\n        entries.sort((a, b) => b[1] - a[1]);\r\n\r\n        // Filter only entries with a change greater than or equal to 0.22\r\n        filteredEntries = entries.filter((entry) => entry[1] >= 0.22);\r\n\r\n        // Get only the top 5 most impacted areas\r\n        filteredEntries = filteredEntries.slice(0, 8);\r\n\r\n        const filteredHashMap = Object.fromEntries(filteredEntries);\r\n        const selectedValues = filteredHashMap ? Object.keys(filteredHashMap) : [];\r\n\r\n        return selectedValues\r\n    }\r\n\r\n    const getLeastImpactedZones = () => {\r\n        \r\n        if (!hashMap) {\r\n            return [];\r\n        }\r\n\r\n        const entries = Object.entries(hashMap);\r\n\r\n        let filteredEntries;\r\n\r\n        entries.sort((a, b) => a[1] - b[1]);\r\n\r\n        // Filter only entries with a change less than 0.11\r\n        filteredEntries = entries.filter((entry) => entry[1] <= -0.11);\r\n\r\n        // Get only the bottom 5 least impacted areas\r\n        // filteredEntries = filteredEntries.slice(0, 8);\r\n\r\n        const filteredHashMap = Object.fromEntries(filteredEntries);\r\n        const selectedValues = filteredHashMap ? Object.keys(filteredHashMap) : [];\r\n\r\n        return selectedValues\r\n\r\n    }\r\n\r\n    const getBusiestZones = () => {\r\n\r\n        if (!busynessHashMap){\r\n            return [];\r\n        }\r\n\r\n        const entries = Object.entries(busynessHashMap)\r\n\r\n        let filteredEntries;\r\n\r\n        entries.sort((a, b) => b[1] - a[1]);\r\n\r\n        filteredEntries = entries.slice(0, 8)\r\n\r\n        const filteredHashMap = Object.fromEntries(filteredEntries);\r\n        const selectedValues = filteredHashMap ? Object.keys(filteredHashMap) : [];\r\n\r\n        return selectedValues\r\n\r\n    }\r\n\r\n    const getQuietestZones = () => {\r\n\r\n        if (!busynessHashMap){\r\n            return [];\r\n        }\r\n\r\n        const entries = Object.entries(busynessHashMap)\r\n\r\n        let filteredEntries;\r\n\r\n        entries.sort((a, b) => a[1] - b[1]);\r\n\r\n        filteredEntries = entries.slice(0, 8)\r\n\r\n        const filteredHashMap = Object.fromEntries(filteredEntries);\r\n        const selectedValues = filteredHashMap ? Object.keys(filteredHashMap) : [];\r\n\r\n        return selectedValues\r\n\r\n    }\r\n\r\n    // logic to handle changing of zones being highlighted.\r\n    const highlightZones = () => {\r\n        if (labels.length === 0) {\r\n            return;\r\n        }\r\n    \r\n        // Check if the same button has been pressed twice.\r\n        if (activeButton === lastButtonPressed) {\r\n            // If so, reset the colors, reset lastButtonPressed, and reset activeButton.\r\n            resetColours();\r\n            updateLayerColours(map.current, false, eventBaselineHashMap, busynessHashMap);\r\n            setLastButtonPressed(null);\r\n            setActiveButton(null);  // reset activeButton\r\n        } else {\r\n            // If a different button was pressed, set it as lastButtonPressed and highlight the relevant zones.\r\n            setLastButtonPressed(activeButton);\r\n            highlightEventImpact(labels);\r\n        }\r\n    }\r\n\r\n    // use effect used to handle changes in toggle states\r\n    useEffect(() => {\r\n        highlightZones();\r\n    }, [labels])\r\n\r\n    const handleShowChart = () => {\r\n        setShowLineChart((prevShowChart) => !prevShowChart); // Toggle the showChart state\r\n        setShowChart(!showChart); \r\n      };\r\n  \r\n      const accordionData = [\r\n        \r\n        {\r\n          title: 'Display Line Chart Analysis',\r\n          content: <MobileLineChart map = {map}/>,\r\n          toggleChartDisplay: () => setIsChartDisplayed(!isChartDisplayed),\r\n        },\r\n        {\r\n         title: 'Filter Zones By',\r\n         content: \r\n         <div className='button-tile-icons-container-mobile'>\r\n            <div className={`button-tile-icons-mobile ${activeButton === \"Busiest Zones\" ? \"pressed\" : \"\"}`} title=\"Highlight Busiest Zones\" onClick={() => {setLabels(getBusiestZones()); setActiveButton(\"Busiest Zones\")}}>\r\n                <FontAwesomeIcon icon={faWineGlass}/>\r\n                <span style={{ fontSize: '10px' }}>Most Busy</span>\r\n            </div>\r\n            <div className={`button-tile-icons-mobile ${activeButton === \"Least Busy Zones\" ? \"pressed\" : \"\"}`} title=\"Highlight Least Busy Zones\" onClick={() => {setLabels(getQuietestZones()); setActiveButton(\"Least Busy Zones\")}}>\r\n                <FontAwesomeIcon icon={faWineGlassEmpty} />\r\n                <span style={{ fontSize: '10px' }} >Least Busy</span>\r\n            </div>\r\n            <div className={`button-tile-icons-mobile ${activeButton === \"Most Impacted Zones\" ? \"pressed\" : \"\"}`} title=\"Highlight Zones Most Impacted by Event\" onClick={() => {setLabels(getMostImpactedZones()); setActiveButton(\"Most Impacted Zones\")}}>\r\n                <FontAwesomeIcon icon={faArrowTrendUp}/>\r\n                <span style={{ fontSize: '10px' }}>Most Impacted</span>\r\n            </div>\r\n            <div className={`button-tile-icons-mobile ${activeButton === \"Least Impacted Zones\" ? \"pressed\" : \"\"}`}  title='Highlight Zones Least Impacted by Event' onClick={() => {setLabels(getLeastImpactedZones()); setActiveButton(\"Least Impacted Zones\")}}>\r\n                <FontAwesomeIcon icon={faArrowTrendDown} />\r\n                <span style={{ fontSize: '10px' }}>Least Impacted</span>\r\n            </div>\r\n        </div> \r\n        }\r\n      ];\r\n    \r\n      return (\r\n        <div className='parent-chart-container'>\r\n          <div className=\"accordion-mobile\">\r\n            {accordionData.map(({ index, title, content, toggleChartDisplay }, i) => {\r\n              // Always render the first accordion item\r\n              if (i === 0) {\r\n                return (\r\n                  <MobileAccordion key={title} title={title} content={content} index={index} onClick={toggleChartDisplay} />\r\n                );\r\n              }\r\n      \r\n              // Render the second accordion item only if the chart is not displayed\r\n              if (i === 1 && !isChartDisplayed) {\r\n                return (\r\n                  <MobileAccordion key={title} title={title} content={content} index={index} />\r\n                );\r\n              }\r\n      \r\n              return null;\r\n            })}\r\n          </div>\r\n      \r\n          {!isChartDisplayed && !isAccordionActive && (\r\n            <div className='floating-infobox-box-button-container'>\r\n              <div className=\"radio-button\">\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"chartDataOption\"\r\n                  value=\"baselineBusyness\"\r\n                  id=\"baselineBusyness\"\r\n                  checked={!active}\r\n                  onChange={handleOptionChange}\r\n                />\r\n                <label htmlFor=\"baselineBusyness\">\r\n                  Baseline\r\n                </label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"chartDataOption\"\r\n                  value=\"eventImpact\"\r\n                  id=\"eventImpact\"\r\n                  checked={active}\r\n                  onChange={handleOptionChange}\r\n                />\r\n                <label htmlFor=\"eventImpact\">\r\n                  Event Impact\r\n                </label>\r\n              </div>\r\n              <button className='floating-nav-cta-button' onClick={() => setSplitView(!isSplitView)}>\r\n                {isSplitView ? 'Show Original' : 'Display Dual Map Comparison'}\r\n              </button>\r\n            </div>\r\n            )}\r\n        </div>\r\n    );\r\n}      \r\n\r\nexport default MobileNeighbourhoodChartData;\r\n","import React, {useState, useEffect} from 'react';\r\nimport MobileEventCard from './MobileEventCard';\r\nimport MobileNeighbourhoodChartData from './MobileNeighbourhoodChartData'\r\nimport EventAnalysis from './EventAnalysis';\r\nimport \"../App.css\";\r\nimport { useMapContext } from './MapContext';\r\nimport { scaleLinear } from 'd3-scale';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\r\n\r\nfunction MobileFloatingInfoBox( {map, visualiseEventImpact, highlightEventImpact, originalBusynessHashMap, eventBaselineHashMap, busynessHashMap, hashMapOfDifference, colours, resetColours, updateLayerColours, isNeighbourhoodClickedRef}) {\r\n  \r\n  const {showInfoBox, showChartData, showChart, showNeighborhoodInfoBox, neighbourhoodEvents, colourPairs, colourPairIndex, removeAntline, setIsThereALiveInfoBox} = useMapContext();\r\n\r\n  const {zoneID, setZoneID, eventName, setEventName, zone, setZone, useOriginal} = useMapContext();\r\n\r\n  const {setShowInfoBox, setShowNeighborhoodInfoBox, setShowChart, setShowChartData} = useMapContext();\r\n\r\n  const {neighbourhoods, originalLat, originalLng, setNeighbourhoodEvents, showAllMarkers, setShowMatchingEvent} = useMapContext();\r\n\r\n  const {eventForAnalysisComponent, setEventForAnalysisComponent} = useMapContext();\r\n\r\n  const { setIsTimelapseVisible } = useMapContext();\r\n  \r\n  const [richText, setRichText] = useState(null);\r\n  const [textColour, setTextColour] = useState(null);\r\n\r\n  // when the neighbourhood events changes/if they change/ then set the zone id to the zone id value of the first item in the events list, as they will all have the same value\r\n\r\n  const resetMap = (map) => {\r\n    setIsTimelapseVisible(false);\r\n    setIsThereALiveInfoBox(false);\r\n    setShowMatchingEvent(true);\r\n    setShowInfoBox(false);\r\n    setShowNeighborhoodInfoBox(false);\r\n    setShowChartData(false);\r\n    setShowChart(false);\r\n    setNeighbourhoodEvents([]);\r\n    showAllMarkers(map.current);\r\n    map.current.flyTo({zoom: 12, essential: true, center: [originalLng, originalLat] });\r\n    updateLayerColours(map.current, true, originalBusynessHashMap, busynessHashMap);\r\n    neighbourhoods.features.forEach((neighbourhood) => {\r\n      map.current.setPaintProperty(neighbourhood.id, 'fill-opacity', 0.6);\r\n      map.current.setPaintProperty(neighbourhood.id + '-line', 'line-width', 0);\r\n    });\r\n    isNeighbourhoodClickedRef.current = false; // user has reset the select function so we reset the map to default state.\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(neighbourhoodEvents && neighbourhoodEvents.length > 0) {\r\n      setZoneID(neighbourhoodEvents[0].Zone_ID);\r\n      setEventName(neighbourhoodEvents[0].Event_Name);\r\n      setZone(neighbourhoodEvents[0].Zone_Name)\r\n      setEventForAnalysisComponent(neighbourhoodEvents[0])\r\n    }\r\n    \r\n  }, [neighbourhoodEvents]);\r\n\r\n  useEffect(() => {\r\n    const colourScale = scaleLinear().domain([0, 0.4, 0.8]).range(colourPairs[colourPairIndex]);\r\n    const neighbourhoodBusyness = useOriginal ? eventBaselineHashMap[zoneID] : busynessHashMap[zoneID]\r\n    const colour = colourScale(neighbourhoodBusyness);\r\n    setTextColour(colour);\r\n    let text;\r\n    if (neighbourhoodBusyness < 0.29) {\r\n        text = 'Not Very Busy';\r\n    } else if (neighbourhoodBusyness >= 0.29 && neighbourhoodBusyness < 0.4) {\r\n        text = 'Relatively Busy';\r\n    } else if (neighbourhoodBusyness >= 0.4 && neighbourhoodBusyness < 0.7) {\r\n        text = 'Busy';\r\n    } else {\r\n        text = 'Extremely Busy';\r\n    }\r\n    setRichText(text);\r\n  }, [colourPairs, colourPairIndex, busynessHashMap, eventBaselineHashMap, zoneID]);\r\n  \r\n  const eventCards = neighbourhoodEvents ? neighbourhoodEvents.map((event, i) =>{\r\n    return (\r\n      <MobileEventCard \r\n        key = {i}\r\n        event={event}\r\n        visualiseEventImpact={visualiseEventImpact}\r\n        map={map}\r\n      />\r\n      )\r\n  }) : null;\r\n\r\n  function renderHeader() {\r\n    return (\r\n      <div style={{display: 'flex', alignItems: 'left', width: '100%'}}>\r\n        <button className='floating-info-box-back-button-mobile' onClick={() => {\r\n          removeAntline(map.current)\r\n          resetMap(map);\r\n        }}>\r\n          <FontAwesomeIcon icon={faArrowLeft} />\r\n        </button>\r\n        <h2 className='floating-info-box-zone-header-mobile'>\r\n            {showChartData ? eventName : zone}\r\n        </h2>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  function renderChartOrAnalysis() {\r\n  \r\n    if (!showChartData) {\r\n      return <h4 style={{width: '100%'}}className='floating-info-box-zone-busyness-sub-header-mobile'> {zone} is <span style={{ color: textColour }}>{richText}</span></h4>;\r\n    }\r\n  \r\n    return showChart ? null : <EventAnalysis eventForAnalysisComponent={eventForAnalysisComponent}/>;\r\n  }\r\n  \r\n  \r\n  function renderInfoBoxContent() {\r\n    if (!showInfoBox) {\r\n      return null;\r\n    }\r\n  \r\n    if (showChartData) {\r\n      return (\r\n        <MobileNeighbourhoodChartData \r\n          map={map}\r\n          hashMap={hashMapOfDifference}\r\n          busynessHashMap={busynessHashMap}\r\n          eventBaselineHashMap={eventBaselineHashMap}\r\n          colours={colours}\r\n          highlightEventImpact={highlightEventImpact}\r\n          zoneID={zoneID}\r\n          resetColours={resetColours}\r\n        />\r\n      );\r\n    }\r\n  \r\n    return eventCards;\r\n\r\n  }\r\n  \r\n  function renderNeighborhoodMessage() {\r\n    return showNeighborhoodInfoBox && <p>There are no events happening in this neighbourhood.</p>;\r\n  }\r\n  \r\n  const {isDrawerOpen} = useMapContext();\r\n\r\n  return (\r\n    (showInfoBox || showNeighborhoodInfoBox) && (\r\n      <div className={`floating-info-box ${isDrawerOpen ? \"open\" : \"\"}`}>\r\n        {renderHeader()}\r\n        {renderChartOrAnalysis()}\r\n        {renderInfoBoxContent()}\r\n        {renderNeighborhoodMessage()}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default MobileFloatingInfoBox;"],"names":["_ref","text","eventForAnalysisComponent","_useState","showChart","useState","_useState2","_slicedToArray","isTextShort","setIsTextShort","_jsxs","className","children","style","display","flexDirection","alignItems","margin","marginRight","textAlign","Event_Impact_Start","Event_Impact_End","Event_Impact_Analysis","length","substring","_jsx","color","cursor","textDecoration","onClick","event","visualiseEventImpact","map","_useMapContext","useMapContext","setShowChartData","removeAllButOneMarker","addAntline","removeAntline","addMarker","marginTop","Event_Name","description","current","Event_ID","eventId","antlineEvent","antline","find","feature","properties","event_id","setTimeout","lastCoordinates","geometry","coordinates","title","content","isActive","setIsActive","isAccordionActive","setIsAccordionActive","concat","FontAwesomeIcon","icon","faChevronUp","faChevronDown","fontSize","ChartJS","register","annotationPlugin","neighbourhoods","eventID","eventComparisonData","zoneID","setZoneID","zone","setZone","zones","features","zoneOptions","zoneKeys","location_id","prevSelectedZone","setPrevSelectedZone","_useState3","_useState4","dataValues","setDataValues","_useState5","_useState6","labels","setLabels","setPaintProperty","dropDownOptions","index","value","times","chartData","datasets","label","data","fill","target","above","below","borderColor","tension","options","responsive","maintainAspectRatio","aspectRatio","plugins","legend","annotation","annotations","startLine","type","mode","scaleID","borderWidth","position","backgroundColor","endLine","line1","scales","x","grid","ticks","y","useEffect","updatedDataValues","updatedLabels","key","currentBusynessValue","currentTimeValue","push","onChange","e","selectedIndex","dataset","zoneId","Line","hashMap","busynessHashMap","eventBaselineHashMap","colours","highlightEventImpact","resetColours","_useMapContext2","isSplitView","setShowChart","setSplitView","updateLayerColours","lastButtonPressed","setLastButtonPressed","activeButton","setActiveButton","_useState7","_useState8","_useState9","_useState10","_useMapContext4","_useState11","_useState12","setChartData","_useState13","_useState14","showMostImpactedZones","setShowMostImpactedZones","_useState15","_useState16","_useState17","_useState18","active","setActive","_useState19","_useState20","isChartDisplayed","setIsChartDisplayed","_getImpactedZonesForC","names","filteredEntries","entries","Object","sort","a","b","slice","filteredHashMap","fromEntries","values","_ref2","matchingObject","neighbourhood","id","getImpactedZonesForChart","newChartData","barThickness","context","chart","chartArea","dataIndex","getGradientMostImpacted","getGradientLeastImpacted","indexAxis","beginAtZero","font","size","maxRotation","minRotation","tooltip","family","align","makeChartData","ctx","_context$chartArea","top","bottom","gradientSegment","createLinearGradient","addColorStop","_context$chartArea2","handleOptionChange","accordionData","MobileLineChart","toggleChartDisplay","keys","getBusiestZones","faWineGlass","getQuietestZones","faWineGlassEmpty","filter","entry","getMostImpactedZones","faArrowTrendUp","getLeastImpactedZones","faArrowTrendDown","_ref4","i","MobileAccordion","name","checked","htmlFor","originalBusynessHashMap","hashMapOfDifference","isNeighbourhoodClickedRef","showInfoBox","showChartData","showNeighborhoodInfoBox","neighbourhoodEvents","colourPairs","colourPairIndex","setIsThereALiveInfoBox","eventName","setEventName","useOriginal","_useMapContext3","setShowInfoBox","setShowNeighborhoodInfoBox","originalLat","originalLng","setNeighbourhoodEvents","showAllMarkers","setShowMatchingEvent","_useMapContext5","setEventForAnalysisComponent","setIsTimelapseVisible","richText","setRichText","textColour","setTextColour","Zone_ID","Zone_Name","colourScale","scaleLinear","domain","range","neighbourhoodBusyness","colour","eventCards","MobileEventCard","isDrawerOpen","width","flyTo","zoom","essential","center","forEach","resetMap","faArrowLeft","EventAnalysis","MobileNeighbourhoodChartData"],"sourceRoot":""}