{"version":3,"file":"static/js/337.b769ea67.chunk.js","mappings":"mKA6BA,IA1BA,SAAsBA,GAA4C,IAKxCC,EALDC,EAAyBF,EAAzBE,0BACrBC,GADyDH,EAATI,WACVC,EAAAA,EAAAA,WAAS,IAAKC,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAA7CK,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAOlC,OACEI,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mCAAkCC,SAAA,EAC/CF,EAAAA,EAAAA,MAAA,OAAKG,MAAO,CAACC,QAAS,OAAQC,cAAe,MAAOC,WAAY,cAAcJ,SAAA,EAC5EF,EAAAA,EAAAA,MAAA,MAAIG,MAAO,CAACI,OAAQ,IAAKC,YAAa,OAAQC,UAAW,QAAQP,SAAA,CAAC,eAAaV,EAA0BkB,uBACzGV,EAAAA,EAAAA,MAAA,MAAIG,MAAO,CAACI,OAAQ,IAAKE,UAAW,QAAQP,SAAA,CAAC,cAAYV,EAA0BmB,wBAErFX,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CACGJ,GAVeP,EAUYC,EAA0BoB,sBATjDrB,EAAKsB,OAAS,IAAMtB,EAAKuB,UAAU,EAAG,KAAO,QAAUvB,GASmBC,EAA0BoB,uBACvGG,EAAAA,EAAAA,KAAA,QAAAb,SAAM,YACLV,EAA0BoB,sBAAsBC,OAAS,MACxDE,EAAAA,EAAAA,KAAA,QAAMZ,MAAO,CAACa,MAAO,QAASC,OAAQ,UAAWC,eAAgB,aAAcC,QAhB/D,WACtBpB,GAAgBD,EACpB,EAcoHI,SACvGJ,EAAc,YAAc,mBAM3C,C,kICOF,MA9BA,SAAkBR,GAAuC,IAApC8B,EAAK9B,EAAL8B,MAAOC,EAAoB/B,EAApB+B,qBAAsBC,EAAGhC,EAAHgC,IAE9CC,GAAwFC,EAAAA,EAAAA,KAAjFC,EAAgBF,EAAhBE,iBAAkBC,EAAqBH,EAArBG,sBAAuBC,EAAUJ,EAAVI,WAAYC,EAAaL,EAAbK,cAAeC,EAASN,EAATM,UAK3E,OACI7B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,+BAA8BC,SAAA,EACzCa,EAAAA,EAAAA,KAAA,MAAIZ,MAAO,CAAC2B,UAAW,OAAO5B,SAAEkB,EAAMW,cACtChB,EAAAA,EAAAA,KAAA,KAAAb,SAAIkB,EAAMY,eACVjB,EAAAA,EAAAA,KAAA,UAAQd,UAAU,0BAA0BkB,QAAS,WACjDS,EAAcN,EAAIW,SAClBZ,EAAqBD,EAAMc,UAC3BT,GAAiB,GACjBC,EAAsBN,EAAMc,UAE5B,IAdkBC,EAcZC,GAdYD,EAcwBf,EAAMc,SAbjDG,EAAAA,EAAiBC,MAAK,SAACC,GAAO,OAAKA,EAAQC,WAAWC,WAAaN,CAAO,KAezEO,YAAW,WAAOf,EAAWL,EAAIW,QAASG,EACtC,GACJ,KAEA,IAAMO,EAAkBP,EAAaQ,SAASC,YAAYT,EAAaQ,SAASC,YAAYhC,OAAS,GACrGgB,EAAUP,EAAIW,QAASU,EAC3B,EAAEzC,SAAC,6BAGf,E,uCCxBA4C,EAAAA,GAAQC,SACJC,EAAAA,GA8JA,MA3JJ,SAAkB1D,GAAW,IAARgC,EAAGhC,EAAHgC,IAEfC,GAAyFC,EAAAA,EAAAA,KAAlFyB,EAAc1B,EAAd0B,eAAgBC,EAAO3B,EAAP2B,QAASC,EAAmB5B,EAAnB4B,oBAAqBC,EAAM7B,EAAN6B,OAAQC,EAAS9B,EAAT8B,UAAWC,EAAI/B,EAAJ+B,KAAMC,EAAOhC,EAAPgC,QAExEC,EAAQP,EAAeQ,SAGvBC,EAAcF,EAAMlC,KAAI,SAACF,GAAK,OAAKA,EAAMoB,WAAWc,IAAI,IACxDK,EAAWH,EAAMlC,KAAI,SAACF,GAAK,OAAKA,EAAMoB,WAAWoB,WAAW,IAElEnE,GAAgDE,EAAAA,EAAAA,UAAS,KAAIC,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAAtDoE,EAAgBjE,EAAA,GAAEkE,EAAmBlE,EAAA,GAC5CmE,GAAoCpE,EAAAA,EAAAA,UAAS,IAAGqE,GAAAnE,EAAAA,EAAAA,GAAAkE,EAAA,GAAzCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,GAA4BxE,EAAAA,EAAAA,UAAS,IAAGyE,GAAAvE,EAAAA,EAAAA,GAAAsE,EAAA,GAAjCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAExB9C,EAAIW,QAAQsC,iBAAiBnB,EAAS,QAAS,aAAc,GAE7D,IAAMoB,EAAkBd,EAAYpC,KAAI,SAACgC,EAAMmB,GAAK,OAClD1D,EAAAA,EAAAA,KAAA,UAAoB2D,MAAOpB,EAAM,eAAcK,EAASc,GAAOvE,SAC5DoD,GADUmB,EAEJ,IAGLE,EAAQ,CAAC,CAAC,EAAE,IAAK,CAAC,GAAG,IAAK,CAAC,GAAG,IAAK,CAAC,GAAG,IAAK,CAAC,GAAG,IAAK,CAAC,GAAG,IAAK,CAAC,GAAG,IAAK,CAAC,GAAG,KAE3EC,EAAY,CAChBP,OAAQA,EACRQ,SAAU,CACR,CACEC,MAAO,iBACPC,KAAMd,EACNe,KAAM,CACFC,OAAQ,SACRC,MAAO,uBACPC,MAAO,wBAEXC,YAAa,0BACbC,QAAS,MAITC,EAAU,CACdC,YAAY,EACZC,qBAAqB,EACrBC,YAAa,EACbC,QAAS,CACPC,OAAQ,CACNvF,SAAS,GAEXwF,WAAY,CACVC,YAAa,CACXC,UAAW,CACTC,KAAM,OACNC,KAAM,WACNC,QAAS,IACTvB,MAAOC,EAAMzB,EAAU,GAAG,GAC1BkC,YAAa,0BACbc,YAAa,EACbpB,MAAO,CACLqB,QAAS,QACT/F,SAAS,EACTgG,SAAU,QACVC,gBAAiB,uBAGrBC,QAAS,CACPP,KAAM,OACNC,KAAM,WACNC,QAAS,IACTvB,MAAOC,EAAMzB,EAAU,GAAG,GAC1BkC,YAAa,0BACbc,YAAa,EACbpB,MAAO,CACLqB,QAAS,MACT/F,SAAS,EACTgG,SAAU,QACVC,gBAAiB,uBAGrBE,MAAO,CACLR,KAAM,OACNC,KAAM,aACNC,QAAS,IACTvB,MAAO,EACPU,YAAa,qBACbc,YAAa,MAMrBM,OAAQ,CACJC,EAAG,CACDC,KAAM,CACJ1F,MAAO,aAET2F,MAAO,CACL3F,MAAO,YAGX4F,EAAG,CACDF,KAAM,CACJ1F,MAAO,aAET2F,MAAO,CACL3F,MAAO,cA8BjB,OAxBA6F,EAAAA,EAAAA,YAAU,WAGR,IAAMC,EAAoB,GACpBC,EAAgB,GAEtB,IAAK,IAAIC,KAAO7D,EAAqB,CAEnC,IAAM8D,EAAuB9D,EAAoB6D,GAAK5D,GAChD8D,EAAmBF,EAEzBF,EAAkBK,KAA4B,IAAvBF,GACvBF,EAAcI,KAAKD,EACrB,CAEAhD,EAAc4C,GACdxC,EAAUyC,GAENlD,IAAqBT,GAAU9B,EAAIW,UACnCX,EAAIW,QAAQsC,iBAAiBV,EAAmB,QAAS,aAAc,GACvEC,EAAoBV,GAExB,GAAG,CAACA,EAAQD,EAAqB7B,EAAKuC,KAGtC7D,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEa,EAAAA,EAAAA,KAAA,UAAQd,UAAU,wBAChByE,MAAOpB,EACP8D,SAAU,SAACC,GAEPhE,EAAUgE,EAAEpC,OAAOK,QAAQ+B,EAAEpC,OAAOqC,eAAeC,QAAQC,QAC3DjE,EAAQ8D,EAAEpC,OAAOP,MACrB,EAAExE,SAEDsE,KAEHxE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,EACnCa,EAAAA,EAAAA,KAAA,MAAIZ,MAAO,CAACC,QAAQ,OAAQC,cAAc,MAAOE,OAAO,MAAOkH,eAAe,UAAUvH,SAAC,4BACzFa,EAAAA,EAAAA,KAAC2G,EAAAA,GAAI,CAAEpC,QAASA,EAASP,KAAMH,SAIvC,E,oBCjJJ,EAhBkB,SAAHtF,GAA4B,IAAtBqI,EAAKrI,EAALqI,MAAOxB,EAAO7G,EAAP6G,QAC1B1G,GAAgCE,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAAxCmI,EAAQhI,EAAA,GAAEiI,EAAWjI,EAAA,GAE5B,OACEI,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBC,SAAA,EACpCF,EAAAA,EAAAA,MAAA,OACEC,UAAS,mBAAA6H,OAAqBF,EAAW,UAAY,IACrDzG,QAAS,kBAAM0G,GAAaD,EAAS,EAAC1H,SAAA,CACvC,YAAQa,EAAAA,EAAAA,KAAA,OAAKd,UAAW,YAAWC,SAAEyH,KACpC5G,EAAAA,EAAAA,KAACgH,EAAAA,EAAe,CAACC,KAAMJ,EAAWK,EAAAA,IAAcC,EAAAA,IAAe/H,MAAO,CAAEgI,SAAU,aAEnFP,IAAY7G,EAAAA,EAAAA,KAAA,OAAKd,UAAU,oBAAmBC,SAAEiG,MAGvD,EC8VA,MArWA,SAA+B7G,GAAwG,IAArGgC,EAAGhC,EAAHgC,IAAK8G,EAAO9I,EAAP8I,QAASC,EAAe/I,EAAf+I,gBAAiBC,EAAoBhJ,EAApBgJ,qBAAsBC,EAAOjJ,EAAPiJ,QAASC,EAAoBlJ,EAApBkJ,qBAAuBC,EAAYnJ,EAAZmJ,aAE5GxF,GAAkBzB,EAAAA,EAAAA,KAAlByB,eACPyF,GAA6DlH,EAAAA,EAAAA,KAA7BmH,GAAhBD,EAAThJ,UAAuBgJ,EAAZE,aAAyBF,EAAXC,aAAaE,EAAYH,EAAZG,aACtCC,GAAsBtH,EAAAA,EAAAA,KAAtBsH,mBAEPrJ,GAAkDE,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAAzDsJ,EAAiBnJ,EAAA,GAAEoJ,EAAoBpJ,EAAA,GAC9CmE,GAAwCpE,EAAAA,EAAAA,UAAS,MAAKqE,GAAAnE,EAAAA,EAAAA,GAAAkE,EAAA,GAA/CkF,EAAYjF,EAAA,GAAEkF,EAAelF,EAAA,GAKpCG,GAAsCxE,EAAAA,EAAAA,UAAS,MAAKyE,GAAAvE,EAAAA,EAAAA,GAAAsE,EAAA,GACpDgF,GADkB/E,EAAA,GAAgBA,EAAA,IACUzE,EAAAA,EAAAA,UAAS,KAAGyJ,GAAAvJ,EAAAA,EAAAA,GAAAsJ,EAAA,GACxDE,GADqBD,EAAA,GAAmBA,EAAA,IACEzJ,EAAAA,EAAAA,WAAS,IAAM2J,GAAAzJ,EAAAA,EAAAA,GAAAwJ,EAAA,GAIzDE,GAJoBD,EAAA,GAAkBA,EAAA,IAIJ3J,EAAAA,EAAAA,UAAS,OAAK6J,GAAA3J,EAAAA,EAAAA,GAAA0J,EAAA,GAA9BE,GAAFD,EAAA,GAAcA,EAAA,IAE9BE,GAA0D/J,EAAAA,EAAAA,WAAS,GAAMgK,GAAA9J,EAAAA,EAAAA,GAAA6J,EAAA,GAAlEE,EAAqBD,EAAA,GAAEE,EAAwBF,EAAA,GACtDG,GAA4BnK,EAAAA,EAAAA,UAAS,IAAGoK,GAAAlK,EAAAA,EAAAA,GAAAiK,EAAA,GAAjCzF,EAAM0F,EAAA,GAAEzF,EAASyF,EAAA,GAExBC,GAA4BrK,EAAAA,EAAAA,WAAS,GAAKsK,GAAApK,EAAAA,EAAAA,GAAAmK,EAAA,GAAnCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,IAuGxBpD,EAAAA,EAAAA,YAAU,WACN,IAAAuD,EArG6B,WAC7B,IAAKhC,EACL,MAAO,CAACiC,MAAO,GAAIpG,WAAY,IAG/B,IACIqG,EADEC,EAAUC,OAAOD,QAAQnC,GAG3BwB,GACJW,EAAQE,MAAK,SAACC,EAAGC,GAAC,OAAKA,EAAE,GAAKD,EAAE,EAAE,IAClCJ,EAAkBC,EAAQK,MAAM,EAAG,KAEnCL,EAAQE,MAAK,SAACC,EAAGC,GAAC,OAAKD,EAAE,GAAKC,EAAE,EAAE,IAClCL,EAAkBC,EAAQK,MAAM,EAAG,IAGnC,IAAMC,EAAkBL,OAAOM,YAAYR,GACrCrG,EAAa4G,EAAkBL,OAAOO,OAAOF,GAAkB,GAOrE,MAAO,CAACR,MALMC,EAAgBhJ,KAAI,SAAA0J,GAAY,IAAVhE,GAASnH,EAAAA,EAAAA,GAAAmL,EAAA,GAAN,GACjCC,EAAiBhI,EAAeQ,SAASnB,MAAK,SAAA4I,GAAa,OAAIA,EAAcC,KAAOnE,CAAG,IAC7F,OAAOiE,EAAiBA,EAAezI,WAAWc,KAAO,IACzD,IAEeW,WAAAA,EACnB,CA4EgCmH,GAArBf,EAAKD,EAALC,MAAOpG,EAAUmG,EAAVnG,WACdK,EAAUD,GACV,IAAMgH,EA3EY,SAAChB,EAAOpG,GAE1B,IAAMc,EAAO,CACTV,OAAQgG,EACRxF,SAAU,CACN,CACIC,MAAO,qBACPwG,aAAc,GACdvG,KAAMd,EACNoC,gBAAiB,SAACkF,GACd,IAAMC,EAAQD,EAAQC,MAEtB,OADoBA,EAAbC,UAIHF,EAAQG,WAAa,EACd9B,EAAwB+B,EAAwBH,GAASI,EAAyBJ,GAElF,QALA,IAOf,KAgDZ,MAAO,CAACzG,KAAAA,EAAMO,QA3CE,CACZE,qBAAqB,EACrBD,YAAY,EACZsG,UAAW,IACXrF,OAAQ,CACJC,EAAG,CACCqF,aAAa,EACbnF,MAAO,CACH3F,MAAO,QACP+K,KAAM,CACFC,KAAM,IAEVC,YAAa,GACbC,YAAa,IAEjBxF,KAAM,CACFtG,SAAS,IAGjBwG,EAAG,CACCxG,SAAS,EACTsG,KAAM,CACFtG,SAAS,KAIrBsF,QAAS,CACLC,OAAQ,CACJvF,SAAS,GAEb+L,QAAS,CAAC,EACVxE,MAAO,CACHvH,SAAS,EACTb,KAAM,qBACNyB,MAAO,QACP+K,KAAM,CACFC,KAAM,GACNI,OAAQ,SAEZC,MAAO,YAKvB,CAMyBC,CAAcjC,EAAOpG,GAC1CwF,EAAa4B,EACjB,GAAG,CAACzB,EAAuBxB,IAG3B,IAAMuD,EAA0B,SAACJ,GAC7B,IAAOgB,EAAoChB,EAApCgB,IAAGC,EAAiCjB,EAA/BE,UAAagB,EAAGD,EAAHC,IAAKC,EAAMF,EAANE,OACxBC,EAAkBJ,EAAIK,qBAAqB,EAAGH,EAAK,EAAGC,GAG5D,OAFAC,EAAgBE,aAAa,EAAGtE,EAAQ,IACxCoE,EAAgBE,aAAa,EAAGtE,EAAQ,IACjCoE,CACX,EAEMf,EAA2B,SAACL,GAC9B,IAAOgB,EAAoChB,EAApCgB,IAAGO,EAAiCvB,EAA/BE,UAAagB,EAAGK,EAAHL,IAAKC,EAAMI,EAANJ,OACxBC,EAAkBJ,EAAIK,qBAAqB,EAAGH,EAAK,EAAGC,GAG5D,OAFAC,EAAgBE,aAAa,EAAGtE,EAAQ,IACxCoE,EAAgBE,aAAa,EAAGtE,EAAQ,IACjCoE,CACX,EAQMI,EAAqB,WACvB5C,GAAWD,EACf,GAEArD,EAAAA,EAAAA,YAAU,WATNiC,EAAmBxH,EAAIW,SAAUiI,EAAQ5B,EAAsBD,GAC/DI,IACAoB,GAA0BD,EAS9B,GAAG,CAACM,KAoHJrD,EAAAA,EAAAA,YAAU,WAnBgB,IAAlBxC,EAAOxD,SAKPoI,IAAiBF,GAEjBN,IACAK,EAAmBxH,EAAIW,SAAS,EAAOqG,EAAsBD,GAC7DW,EAAqB,MACrBE,EAAgB,QAGhBF,EAAqBC,GACrBT,EAAqBnE,IAO7B,GAAG,CAACA,IAEJ,IAKQ2I,EAAgB,CAEpB,CACErF,MAAO,8BACPxB,SAASpF,EAAAA,EAAAA,KAACkM,EAAS,CAAC3L,IAAOA,KAE7B,CACCqG,MAAO,kBACPxB,SAASnG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,8BAA6BC,SAAA,EACrDF,EAAAA,EAAAA,MAAA,OAAKC,UAAS,qBAAA6H,OAAwC,kBAAjBmB,EAAmC,UAAY,IAAMtB,MAAM,0BAA0BxG,QAAS,WAAOmD,EAjFvH,WAEpB,IAAK+D,EACD,MAAO,GAGX,IAEIiC,EAFEC,EAAUC,OAAOD,QAAQlC,GAI/BkC,EAAQE,MAAK,SAACC,EAAGC,GAAC,OAAKA,EAAE,GAAKD,EAAE,EAAE,IAElCJ,EAAkBC,EAAQK,MAAM,EAAG,GAEnC,IAAMC,EAAkBL,OAAOM,YAAYR,GAG3C,OAFuBO,EAAkBL,OAAO0C,KAAKrC,GAAmB,EAI5E,CA8DyJsC,IAAoBjE,EAAgB,gBAAgB,EAAEhJ,SAAA,EACtMa,EAAAA,EAAAA,KAACgH,EAAAA,EAAe,CAACC,KAAMoF,EAAAA,IAAajN,MAAO,CAAEgI,SAAU,WACvDpH,EAAAA,EAAAA,KAAA,QAAAb,SAAM,kBAEVF,EAAAA,EAAAA,MAAA,OAAKC,UAAS,qBAAA6H,OAAwC,qBAAjBmB,EAAsC,UAAY,IAAMtB,MAAM,6BAA6BxG,QAAS,WAAOmD,EAhE5H,WAErB,IAAK+D,EACD,MAAO,GAGX,IAEIiC,EAFEC,EAAUC,OAAOD,QAAQlC,GAI/BkC,EAAQE,MAAK,SAACC,EAAGC,GAAC,OAAKD,EAAE,GAAKC,EAAE,EAAE,IAElCL,EAAkBC,EAAQK,MAAM,EAAG,GAEnC,IAAMC,EAAkBL,OAAOM,YAAYR,GAG3C,OAFuBO,EAAkBL,OAAO0C,KAAKrC,GAAmB,EAI5E,CA6C+JwC,IAAqBnE,EAAgB,mBAAmB,EAAEhJ,SAAA,EAChNa,EAAAA,EAAAA,KAACgH,EAAAA,EAAe,CAACC,KAAMsF,EAAAA,IAAkBnN,MAAO,CAAEgI,SAAU,WAC5DpH,EAAAA,EAAAA,KAAA,QAAAb,SAAM,mBAEVF,EAAAA,EAAAA,MAAA,OAAKC,UAAS,qBAAA6H,OAAwC,wBAAjBmB,EAAyC,UAAY,IAAMtB,MAAM,yCAAyCxG,QAAS,WAAOmD,EA1IvI,WAEzB,IAAK8D,EACD,MAAO,GAGX,IAEIkC,EAFEC,EAAUC,OAAOD,QAAQnC,GAI/BmC,EAAQE,MAAK,SAACC,EAAGC,GAAC,OAAKA,EAAE,GAAKD,EAAE,EAAE,IAMlCJ,GAHAA,EAAkBC,EAAQgD,QAAO,SAACC,GAAK,OAAKA,EAAM,IAAM,GAAI,KAG1B5C,MAAM,EAAG,GAE3C,IAAMC,EAAkBL,OAAOM,YAAYR,GAG3C,OAFuBO,EAAkBL,OAAO0C,KAAKrC,GAAmB,EAG5E,CAoH8K4C,IAAyBvE,EAAgB,sBAAsB,EAAEhJ,SAAA,EACtOa,EAAAA,EAAAA,KAACgH,EAAAA,EAAe,CAACC,KAAM0F,EAAAA,IAAgBvN,MAAO,CAAEgI,SAAU,WAC1DpH,EAAAA,EAAAA,KAAA,QAAAb,SAAM,sBAEVF,EAAAA,EAAAA,MAAA,OAAKC,UAAS,qBAAA6H,OAAwC,yBAAjBmB,EAA0C,UAAY,IAAOtB,MAAM,0CAA0CxG,QAAS,WAAOmD,EAtHzI,WAE1B,IAAK8D,EACD,MAAO,GAGX,IAEIkC,EAFEC,EAAUC,OAAOD,QAAQnC,GAI/BmC,EAAQE,MAAK,SAACC,EAAGC,GAAC,OAAKD,EAAE,GAAKC,EAAE,EAAE,IAGlCL,EAAkBC,EAAQgD,QAAO,SAACC,GAAK,OAAKA,EAAM,KAAO,GAAI,IAK7D,IAAM3C,EAAkBL,OAAOM,YAAYR,GAG3C,OAFuBO,EAAkBL,OAAO0C,KAAKrC,GAAmB,EAI5E,CA+FiL8C,IAA0BzE,EAAgB,uBAAuB,EAAEhJ,SAAA,EAC3Oa,EAAAA,EAAAA,KAACgH,EAAAA,EAAe,CAACC,KAAM4F,EAAAA,IAAkBzN,MAAO,CAAEgI,SAAU,WAC5DpH,EAAAA,EAAAA,KAAA,QAAAb,SAAM,2BAOf,OACIF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBC,SAAA,EAC7Ca,EAAAA,EAAAA,KAAA,OAAKd,UAAU,YAAWC,SACvB8M,EAAc1L,KAAI,SAAAuM,GAAA,IAAGlG,EAAKkG,EAALlG,MAAOxB,EAAO0H,EAAP1H,QAAO,OAClCpF,EAAAA,EAAAA,KAAC+M,EAAS,CAAanG,MAAOA,EAAOxB,QAASA,GAA9BwB,EAAyC,OAGnD3H,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wCAAuCC,SAAA,EAClDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EACzBa,EAAAA,EAAAA,KAAA,SACIgF,KAAK,QACLgI,KAAK,kBACLrJ,MAAM,mBACNyG,GAAG,mBACH6C,SAAU9D,EACV9C,SAAU2F,KAEdhM,EAAAA,EAAAA,KAAA,SAAOkN,QAAQ,mBAAkB/N,SAAC,2BAGlCa,EAAAA,EAAAA,KAAA,SACIgF,KAAK,QACLgI,KAAK,kBACLrJ,MAAM,cACNyG,GAAG,cACH6C,QAAS9D,EACT9C,SAAU2F,KAEdhM,EAAAA,EAAAA,KAAA,SAAOkN,QAAQ,cAAa/N,SAAC,6BAIjCa,EAAAA,EAAAA,KAAA,UAAQd,UAAU,0BAA0BkB,QAAS,kBAAM0H,GAAcF,EAAY,EAACzI,SACjFyI,EAAc,gBAAkB,qCAKrD,E,oBC3LA,MAzKA,SAAwBrJ,GAA6R,IAA1RgC,EAAGhC,EAAHgC,IAAKD,EAAoB/B,EAApB+B,qBAAsBmH,EAAoBlJ,EAApBkJ,qBAAsB0F,EAAuB5O,EAAvB4O,wBAAyB5F,EAAoBhJ,EAApBgJ,qBAAsBD,EAAe/I,EAAf+I,gBAAiB8F,EAAmB7O,EAAnB6O,oBAAqB5F,EAAOjJ,EAAPiJ,QAASE,EAAYnJ,EAAZmJ,aAAcK,EAAkBxJ,EAAlBwJ,mBAAoBsF,EAAyB9O,EAAzB8O,0BAA2BC,EAAkB/O,EAAlB+O,mBAAoBC,EAAqBhP,EAArBgP,sBAAuBC,EAAajP,EAAbiP,cAAeC,EAAgBlP,EAAhBkP,iBAE/RjN,GAA2IC,EAAAA,EAAAA,KAApIiN,EAAWlN,EAAXkN,YAAaC,EAAanN,EAAbmN,cAAehP,EAAS6B,EAAT7B,UAAWiP,EAAuBpN,EAAvBoN,wBAAyBC,EAAmBrN,EAAnBqN,oBAAqBC,EAAWtN,EAAXsN,YAAaC,EAAevN,EAAfuN,gBAAiBlN,EAAaL,EAAbK,cAE1H8G,GAA+FlH,EAAAA,EAAAA,KAAxF4B,EAAMsF,EAANtF,OAAQC,EAASqF,EAATrF,UAAW0L,EAASrG,EAATqG,UAAWC,EAAYtG,EAAZsG,aAAc1L,EAAIoF,EAAJpF,KAAMC,EAAOmF,EAAPnF,QAAS0L,EAAWvG,EAAXuG,YAAaC,EAAYxG,EAAZwG,aAE/EC,GAAqF3N,EAAAA,EAAAA,KAA9E4N,EAAcD,EAAdC,eAAgBC,EAA0BF,EAA1BE,2BAA4BzG,EAAYuG,EAAZvG,aAAcnH,EAAgB0N,EAAhB1N,iBAEjE6N,GAAiH9N,EAAAA,EAAAA,KAA1GyB,EAAcqM,EAAdrM,eAAgBsM,EAAWD,EAAXC,YAAaC,EAAWF,EAAXE,YAAaC,EAAsBH,EAAtBG,uBAAwBC,GAAcJ,EAAdI,eAAgBC,GAAoBL,EAApBK,qBAEzFC,IAAkEpO,EAAAA,EAAAA,KAA3DhC,GAAyBoQ,GAAzBpQ,0BAA2BqQ,GAA4BD,GAA5BC,6BAElCC,IAA6EtO,EAAAA,EAAAA,KAAtEuO,GAAuBD,GAAvBC,wBAAyBC,GAAqBF,GAArBE,sBAAuBC,GAAkBH,GAAlBG,mBAEvDxQ,IAAgCE,EAAAA,EAAAA,UAAS,MAAKC,IAAAC,EAAAA,EAAAA,GAAAJ,GAAA,GAAvCyQ,GAAQtQ,GAAA,GAAEuQ,GAAWvQ,GAAA,GAC5BmE,IAAoCpE,EAAAA,EAAAA,UAAS,MAAKqE,IAAAnE,EAAAA,EAAAA,GAAAkE,GAAA,GAA3CqM,GAAUpM,GAAA,GAAEqM,GAAarM,GAAA,IAwBhC6C,EAAAA,EAAAA,YAAU,WACL+H,GAAuBA,EAAoB/N,OAAS,IAAM0N,IAC3DlL,EAAUuL,EAAoB,GAAG0B,SACjCtB,EAAaJ,EAAoB,GAAG7M,YACpCwB,EAAQqL,EAAoB,GAAG2B,WAC/BV,GAA6BjB,EAAoB,IAErD,GAAG,CAACA,KAEJ/H,EAAAA,EAAAA,YAAU,WACR,IAAM2J,GAAcC,EAAAA,EAAAA,KAAcC,OAAO,CAAC,EAAG,GAAK,KAAMC,MAAM9B,EAAYC,IACpE8B,EAAwB3B,EAAc3G,EAAqBlF,GAAUiF,EAAgBjF,GACrFyN,EAASL,EAAYI,GAC3BP,GAAcQ,GAWdV,GATIS,EAAwB,IACjB,gBACAA,GAAyB,KAAQA,EAAwB,GACzD,kBACAA,GAAyB,IAAOA,EAAwB,GACxD,OAEA,iBAGb,GAAG,CAAC/B,EAAaC,EAAiBzG,EAAiBC,EAAsBlF,IAEzE,IAAM0N,GAAalC,EAAsBA,EAAoBtN,KAAI,SAACF,EAAO2P,GACvE,OACEhQ,EAAAA,EAAAA,KAACiQ,EAAS,CAER5P,MAAOA,EACPC,qBAAsBA,EACtBC,IAAKA,GAHEyP,EAMb,IAAK,KAgFL,OAEGtC,GAAeE,KACd3O,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EA/ElCF,EAAAA,EAAAA,MAAA,OAAKG,MAAO,CAACC,QAAS,OAAQC,cAAe,MAAOoH,eAAgB,iBAAiBvH,SAAA,EACnFF,EAAAA,EAAAA,MAAA,UAAQC,UAAU,gCAAgCkB,QAAS,WACzDS,EAAcN,EAAIW,SA9DT,SAACX,GAChB+N,GAA2B,GAC3Bb,GAAiB,GACjB5F,GAAa,GACb0F,GAAsB,GACtB0B,IAAsB,GACtBL,IAAqB,GACrBP,GAAe,GACf3N,GAAiB,GACjBgO,EAAuB,IACvBC,GAAepO,EAAIW,SACnBX,EAAIW,QAAQgP,MAAM,CAACC,KAAM,GAAIC,WAAW,EAAMC,OAAQ,CAAC5B,EAAaD,KACpEzG,EAAmBxH,EAAIW,SAAS,EAAMiM,EAAyB7F,GAC/DpF,EAAeQ,SAAS4N,SAAQ,SAACnG,GAC/B5J,EAAIW,QAAQsC,iBAAiB2G,EAAcC,GAAI,eAAgB,IAC/D7J,EAAIW,QAAQsC,iBAAiB2G,EAAcC,GAAK,QAAS,aAAc,EACzE,IACAiD,EAA0BnM,SAAU,CACtC,CA6CQqP,CAAShQ,GACT4N,IACAa,IAAwB,EAC1B,EAAE7P,SAAA,EACAa,EAAAA,EAAAA,KAACgH,EAAAA,EAAe,CAACC,KAAMuJ,EAAAA,MAAe,KAACxQ,EAAAA,EAAAA,KAAA,QAAMZ,MAAO,CAACqR,WAAY,OAAOtR,SAAC,eAE1EqO,EACI0B,IACGjQ,EAAAA,EAAAA,MAAA,UAAQC,UAAU,wCAAwCkB,QAAS,kBAAM6O,IAAuBC,GAAmB,EAAC/P,SAAA,EAClHa,EAAAA,EAAAA,KAACgH,EAAAA,EAAe,CAACC,KAAMyJ,EAAAA,KAAc,KAAC1Q,EAAAA,EAAAA,KAAA,QAAMZ,MAAO,CAACqR,WAAY,OAAOtR,SAAC,wBAE1EF,EAAAA,EAAAA,MAAA,UAAQC,UAAU,wCAAwCkB,QAAS,kBAAM6O,IAAuBC,GAAmB,EAAC/P,SAAA,EAClHa,EAAAA,EAAAA,KAACgH,EAAAA,EAAe,CAACC,KAAM0J,EAAAA,MAAS,KAAC3Q,EAAAA,EAAAA,KAAA,QAAMZ,MAAO,CAACqR,WAAY,OAAOtR,SAAC,uBAEzE,SAQNa,EAAAA,EAAAA,KAAA,MAAId,UAAU,gCAA+BC,SAC1CwO,EAAgBK,EAAYzL,IAO5BoL,EAIEhP,EAAY,MAAOqB,EAAAA,EAAAA,KAAC4Q,EAAAA,EAAa,CAACnS,0BAA2BA,GAA2BE,UAAWA,KAHjGM,EAAAA,EAAAA,MAAA,MAAIC,UAAU,6CAA4CC,SAAA,CAAC,IAAEoD,EAAK,QAAIvC,EAAAA,EAAAA,KAAA,QAAMZ,MAAO,CAAEa,MAAOoP,IAAalQ,SAAEgQ,QAS/GzB,EAIDC,GAEA3N,EAAAA,EAAAA,KAAC6Q,EAAsB,CACrBtQ,IAAKA,EACL8G,QAAS+F,EACT9F,gBAAiBA,EACjBC,qBAAsBA,EACtBC,QAASA,EACTC,qBAAsBA,EACtBpF,OAAQA,EACRqF,aAAcA,IAMbqI,GAnBE,KAyBsB,GAA3BnC,GAA0D,GAAtBN,OACtC,GAEOtN,EAAAA,EAAAA,KAAA,KAAGZ,MAAO,CAAC0R,QAAS,SAAS3R,SAAC,2DAgB3C,C","sources":["components/EventAnalysis.js","components/EventCard.js","components/LineChart.js","components/Accordion.js","components/NeighbourhoodChartData.js","components/FloatingInfoBox.js"],"sourcesContent":["import React, {useState} from 'react';\r\nimport \"../App.css\";\r\n\r\nfunction EventAnalysis({ eventForAnalysisComponent, showChart }) {\r\n    const [isTextShort, setIsTextShort] = useState(true);\r\n    const toggleIsTextShort = () => {\r\n        setIsTextShort(!isTextShort);\r\n    };\r\n    const getShortText = (text) => {\r\n        return text.length > 200 ? text.substring(0, 200) + \"...  \" : text;\r\n    };\r\n    return (\r\n      <div className='floating-info-box-event-analysis'>\r\n        <div style={{display: 'flex', flexDirection: 'row', alignItems: 'flex-start'}}>\r\n          <h5 style={{margin: '0', marginRight: '1rem', textAlign: 'left'}}>Start Time: {eventForAnalysisComponent.Event_Impact_Start}</h5>\r\n          <h5 style={{margin: '0', textAlign: 'left'}}> End Time: {eventForAnalysisComponent.Event_Impact_End}</h5>\r\n        </div>\r\n        <p>\r\n          {isTextShort ? getShortText(eventForAnalysisComponent.Event_Impact_Analysis) : eventForAnalysisComponent.Event_Impact_Analysis}\r\n            <span>       </span>\r\n            {eventForAnalysisComponent.Event_Impact_Analysis.length > 200 &&\r\n              <span style={{color: 'white', cursor: 'pointer', textDecoration: 'underline'}} onClick={toggleIsTextShort}>\r\n                {isTextShort ? 'Show more' : 'Show less'}\r\n              </span>\r\n            }\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\nexport default EventAnalysis","import React from 'react';\r\nimport \"../App.css\";\r\nimport { useMapContext } from './MapContext';\r\nimport antline from '../geodata/antline.geo.json'\r\n\r\nfunction EventCard ({event, visualiseEventImpact, map}) {\r\n\r\n    const {setShowChartData, removeAllButOneMarker, addAntline, removeAntline, addMarker} = useMapContext();\r\n    const findAntlineEventById = (eventId) => {\r\n        return antline.features.find((feature) => feature.properties.event_id === eventId);\r\n      };\r\n    \r\n    return (\r\n        <div className='floating-info-box-event-card'>\r\n            <h2 style={{marginTop: '0px'}}>{event.Event_Name}</h2>\r\n            <p>{event.description}</p>\r\n            <button className='floating-nav-cta-button' onClick={() => {\r\n                removeAntline(map.current)\r\n                visualiseEventImpact(event.Event_ID);\r\n                setShowChartData(true)\r\n                removeAllButOneMarker(event.Event_ID)\r\n\r\n                const antlineEvent = findAntlineEventById(event.Event_ID);\r\n\r\n                setTimeout(() => {addAntline(map.current, antlineEvent)\r\n                    },\r\n                1000)\r\n                \r\n                const lastCoordinates = antlineEvent.geometry.coordinates[antlineEvent.geometry.coordinates.length - 1];\r\n                addMarker(map.current, lastCoordinates);\r\n            }}>Visualise Event Impact</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EventCard","import React, {useState, useEffect} from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport 'chart.js/auto';\r\nimport {\r\n    Chart as ChartJS,\r\n  } from \"chart.js\";\r\nimport { useMapContext } from './MapContext';\r\nimport annotationPlugin from \"chartjs-plugin-annotation\";\r\n\r\nChartJS.register(\r\n    annotationPlugin\r\n  );\r\n\r\nfunction LineChart ({map})  {\r\n\r\n      const {neighbourhoods, eventID, eventComparisonData, zoneID, setZoneID, zone, setZone} = useMapContext();\r\n  \r\n      const zones = neighbourhoods.features;\r\n      \r\n      // Extract the 'zone' property from each object in the `features` array\r\n      const zoneOptions = zones.map((event) => event.properties.zone);\r\n      const zoneKeys = zones.map((event) => event.properties.location_id);\r\n    \r\n      const [prevSelectedZone, setPrevSelectedZone] = useState('4');\r\n      const [dataValues, setDataValues] = useState([]);\r\n      const [labels, setLabels] = useState([]);\r\n\r\n      map.current.setPaintProperty(zoneID + '-line', 'line-width', 4);\r\n\r\n      const dropDownOptions = zoneOptions.map((zone, index) => (\r\n        <option key={index} value={zone} data-zone-id={zoneKeys[index]}>\r\n          {zone}\r\n        </option>\r\n      ));\r\n\r\n      const times = [[9,12], [19,22], [11,17], [12,17], [18,23], [13,16], [11,13], [20,22]];\r\n\r\n      const chartData = {\r\n        labels: labels,\r\n        datasets: [\r\n          {\r\n            label: 'Busyness Score',\r\n            data: dataValues,\r\n            fill: {\r\n                target: 'origin', // Fill area below the line and above y=0\r\n                above: 'rgba(255, 0, 0, 0.4)', // Red color above y=0\r\n                below: 'rgba(0, 255, 0, 0.4)', // Green color below y=0\r\n              },\r\n            borderColor: 'rgb(255, 255, 255, 0.7)',\r\n            tension: 0.1,\r\n          }\r\n        ]\r\n};\r\n      const options = {\r\n        responsive: true,\r\n        maintainAspectRatio: false, \r\n        aspectRatio: 4,\r\n        plugins: {\r\n          legend: {\r\n            display: false, // add this line\r\n          },\r\n          annotation: {\r\n            annotations: {\r\n              startLine: {\r\n                type: 'line', // Use 'line' for line annotation\r\n                mode: 'vertical', // 'vertical' to create a vertical line\r\n                scaleID: 'x', // Use 'x' scale for x-axis\r\n                value: times[eventID - 1][0], // Value where the line will be drawn (start time)\r\n                borderColor: 'rgba(255, 99, 132, 0.9)', // Color of the line\r\n                borderWidth: 2, // Width of the line\r\n                label: {\r\n                  content: 'Start', // Label text for the line\r\n                  display: true, // Show the label\r\n                  position: 'start',\r\n                  backgroundColor: 'rgba(255, 99, 132)'\r\n                },\r\n              },\r\n              endLine: {\r\n                type: 'line', // Use 'line' for line annotation\r\n                mode: 'vertical', // 'vertical' to create a vertical line\r\n                scaleID: 'x', // Use 'x' scale for x-axis\r\n                value: times[eventID - 1][1], // Value where the line will be drawn (end time)\r\n                borderColor: 'rgba(255, 99, 132, 0.9)', // Color of the line\r\n                borderWidth: 2, // Width of the line\r\n                label: {\r\n                  content: 'End', // Label text for the line\r\n                  display: true, // Show the label\r\n                  position: 'start',\r\n                  backgroundColor: 'rgba(255, 99, 132)'\r\n                }\r\n            },\r\n              line1: {\r\n                type: 'line', // Use 'line' for line annotation\r\n                mode: 'horizontal', // 'horizontal' to create a horizontal line\r\n                scaleID: 'y', // Use 'y' scale for y-axis\r\n                value: 0, // Value where the line will be drawn (y=0)\r\n                borderColor: 'rgba(0, 0, 0, 0.7)', // Color of the line\r\n                borderWidth: 2, // Width of the line\r\n              },\r\n            }\r\n          }\r\n        },\r\n        \r\n        scales: {\r\n            x: {\r\n              grid: {\r\n                color: '#D3D3D310', // change the grid line color for x-axis\r\n              },\r\n              ticks: {\r\n                color: '#D3D3D3', // change the label (text) color for x-axis\r\n              },\r\n            },\r\n            y: {\r\n              grid: {\r\n                color: '#D3D3D310', // change the grid line color for y-axis\r\n              },\r\n              ticks: {\r\n                color: '#D3D3D3', // change the label (text) color for y-axis\r\n              },\r\n            },\r\n          },\r\n      };\r\n\r\n      useEffect(() => {\r\n        \r\n        // Update the chart data whenever the selectedZone state changes\r\n        const updatedDataValues = [];\r\n        const updatedLabels = [];\r\n        \r\n        for (let key in eventComparisonData) {\r\n\r\n          const currentBusynessValue = eventComparisonData[key][zoneID];\r\n          const currentTimeValue = key;\r\n        \r\n          updatedDataValues.push(currentBusynessValue * 100); \r\n          updatedLabels.push(currentTimeValue);\r\n        }\r\n\r\n        setDataValues(updatedDataValues);\r\n        setLabels(updatedLabels);\r\n\r\n        if (prevSelectedZone !== zoneID && map.current) {\r\n            map.current.setPaintProperty(prevSelectedZone + '-line', 'line-width', 0); // Set to the default line width\r\n            setPrevSelectedZone(zoneID); // Update the previously selected zone\r\n          }\r\n        }, [zoneID, eventComparisonData, map, prevSelectedZone]);\r\n\r\n      return (\r\n        <div>\r\n          <select className='floating-nav-dropdown'\r\n            value={zone}\r\n            onChange={(e) => {\r\n                \r\n                setZoneID(e.target.options[e.target.selectedIndex].dataset.zoneId);\r\n                setZone(e.target.value);\r\n            }}\r\n          >\r\n            {dropDownOptions}\r\n          </select>\r\n          <div className='line-chart-container'>\r\n            <h3 style={{display:'flex', flexDirection:'row', margin:'0px', justifyContent:'center'}}>+/- Change in Busyness</h3>\r\n            <Line  options={options} data={chartData}/>\r\n          </div>\r\n        </div>\r\n      );\r\n    };\r\n\r\n    \r\n    export default LineChart;\r\n    \r\n","import React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronDown, faChevronUp} from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Accordion = ({ title, content }) => {\r\n  const [isActive, setIsActive] = useState(false);\r\n\r\n  return (\r\n    <div className=\"accordion-item-mobile\">\r\n      <div \r\n        className={`accordion-title ${isActive ? 'pressed' : ''}`}\r\n        onClick={() => setIsActive(!isActive)}\r\n      >        <div className =\"acc-title\">{title}</div>\r\n        <FontAwesomeIcon icon={isActive ? faChevronUp : faChevronDown} style={{ fontSize: '12px' }} />\r\n      </div>\r\n      {isActive && <div className=\"accordion-content\">{content}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Accordion;","import React, {useState, useEffect, useRef} from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport 'chart.js/auto';\r\nimport \"../App.css\";\r\nimport LineChart from './LineChart';\r\nimport Accordion from './Accordion';\r\nimport { useMapContext } from './MapContext';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowTrendDown, faArrowTrendUp, faWineGlass, faWineGlassEmpty} from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nfunction NeighbourhoodChartData({ map, hashMap, busynessHashMap, eventBaselineHashMap, colours, highlightEventImpact,  resetColours}) {\r\n\r\n    const {neighbourhoods} = useMapContext();\r\n    const {showChart, setShowChart, isSplitView, setSplitView} = useMapContext();\r\n    const {updateLayerColours} = useMapContext()\r\n\r\n    const [lastButtonPressed, setLastButtonPressed] = useState(null);\r\n    const [activeButton, setActiveButton] = useState(null);\r\n\r\n    // This state holds the data and options that the chart component needs to create the chart on the page. \r\n    // When this state changes, it triggers the chart to re-render with the new data and options.\r\n    \r\n    const [renderChart, setRenderChart] = useState(null);\r\n    const [selectedValues, setSelectedValues] = useState([]);\r\n    const [showLineChart, setShowLineChart] = useState(false);\r\n    \r\n    // This state holds a separate copy of the data and options for a chart. \r\n    // This copy isn't used directly in rendering but is useful for storing temporary or intermediary states of the chart's data and options.\r\n    const [chartData, setChartData] = useState(null);\r\n\r\n    const [showMostImpactedZones, setShowMostImpactedZones] = useState(false);  // New state for the toggle\r\n    const [labels, setLabels] = useState([]);    \r\n\r\n    const [active, setActive] = useState(true);\r\n\r\n    // This function will handle sorting and extraction of names and data values\r\n    const getImpactedZonesForChart = () => {\r\n        if (!hashMap) {\r\n        return {names: [], dataValues: []};\r\n        }\r\n    \r\n        const entries = Object.entries(hashMap);\r\n        let filteredEntries;\r\n    \r\n        if (showMostImpactedZones) {\r\n        entries.sort((a, b) => b[1] - a[1]);\r\n        filteredEntries = entries.slice(0, 5);\r\n        } else {\r\n        entries.sort((a, b) => a[1] - b[1]);\r\n        filteredEntries = entries.slice(0, 5);\r\n        }\r\n    \r\n        const filteredHashMap = Object.fromEntries(filteredEntries);\r\n        const dataValues = filteredHashMap ? Object.values(filteredHashMap): [];\r\n    \r\n        const names = filteredEntries.map(([key]) => {\r\n        const matchingObject = neighbourhoods.features.find(neighbourhood => neighbourhood.id === key);\r\n        return matchingObject ? matchingObject.properties.zone : null;\r\n        });\r\n    \r\n        return {names, dataValues};\r\n    }\r\n\r\n    // function used to make the chart data\r\n    const makeChartData = (names, dataValues) => {\r\n    \r\n        const data = {\r\n            labels: names,\r\n            datasets: [\r\n                { \r\n                    label: 'Change in Busyness',\r\n                    barThickness: 24,\r\n                    data: dataValues,\r\n                    backgroundColor: (context) => {\r\n                        const chart = context.chart;\r\n                        const {chartArea} = chart;\r\n                        if (!chartArea){\r\n                            return null\r\n                        }\r\n                        if (context.dataIndex >= 0){\r\n                            return showMostImpactedZones ? getGradientMostImpacted(chart) : getGradientLeastImpacted(chart);\r\n                        } else{\r\n                            return 'white'\r\n                        }\r\n                    },\r\n                },\r\n            ],\r\n        };\r\n    \r\n        const options = {\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            indexAxis: 'x',\r\n            scales: {\r\n                x: {\r\n                    beginAtZero: true,\r\n                    ticks: {\r\n                        color: 'white',\r\n                        font: {\r\n                            size: 10,\r\n                        },\r\n                        maxRotation: 45,\r\n                        minRotation: 45\r\n                    },\r\n                    grid: {\r\n                        display: false // hides gridlines along the x-axis\r\n                    },\r\n                },\r\n                y: { \r\n                    display: false, // hides the y-axis\r\n                    grid: {\r\n                        display: false // hides gridlines along the y-axis\r\n                    }\r\n                }\r\n            },\r\n            plugins: {\r\n                legend: {\r\n                    display: false,\r\n                },\r\n                tooltip: {},\r\n                title: {\r\n                    display: true,\r\n                    text: 'Change in Busyness',\r\n                    color: 'white',  // Set title color\r\n                    font: {\r\n                        size: 14,  // Set font size\r\n                        family: 'Arial'  // Set font family\r\n                    },\r\n                    align: 'center'  // center alignment\r\n            },\r\n        },\r\n    };\r\n        return {data, options};\r\n    }\r\n    \r\n    // Trigger chart rerender whenever showMostImpacted state changes\r\n    useEffect(() => {\r\n        const {names, dataValues} = getImpactedZonesForChart();\r\n        setLabels(labels); // Set labels here\r\n        const newChartData = makeChartData(names, dataValues);\r\n        setChartData(newChartData); // Set chartData here\r\n    }, [showMostImpactedZones, hashMap]);\r\n\r\n    // legacy code\r\n    const getGradientMostImpacted = (context) => {\r\n        const {ctx, chartArea: { top, bottom } } = context;\r\n        const gradientSegment = ctx.createLinearGradient(0, top, 0, bottom);\r\n        gradientSegment.addColorStop(0, colours[2]);\r\n        gradientSegment.addColorStop(1, colours[1]);\r\n        return gradientSegment;\r\n    };\r\n    \r\n    const getGradientLeastImpacted = (context) => {\r\n        const {ctx, chartArea: { top, bottom } } = context;\r\n        const gradientSegment = ctx.createLinearGradient(0, top, 0, bottom);\r\n        gradientSegment.addColorStop(0, colours[1]);\r\n        gradientSegment.addColorStop(1, colours[0]);\r\n        return gradientSegment;\r\n    }\r\n\r\n    const handleToggle = () => {\r\n        updateLayerColours(map.current, !active, eventBaselineHashMap, busynessHashMap);\r\n        resetColours();\r\n        setShowMostImpactedZones(!showMostImpactedZones)\r\n    };\r\n\r\n    const handleOptionChange = () => {\r\n        setActive(!active); \r\n    };\r\n\r\n    useEffect(() => {\r\n        handleToggle();\r\n    }, [active]);\r\n\r\n    // new function introduced by harry for buttons to filter map:\r\n\r\n    const getMostImpactedZones = () => {\r\n\r\n        if (!hashMap) {\r\n            return [];\r\n        }\r\n\r\n        const entries = Object.entries(hashMap);\r\n\r\n        let filteredEntries;\r\n\r\n        entries.sort((a, b) => b[1] - a[1]);\r\n\r\n        // Filter only entries with a change greater than or equal to 0.22\r\n        filteredEntries = entries.filter((entry) => entry[1] >= 0.22);\r\n\r\n        // Get only the top 5 most impacted areas\r\n        filteredEntries = filteredEntries.slice(0, 8);\r\n\r\n        const filteredHashMap = Object.fromEntries(filteredEntries);\r\n        const selectedValues = filteredHashMap ? Object.keys(filteredHashMap) : [];\r\n\r\n        return selectedValues\r\n    }\r\n\r\n    const getLeastImpactedZones = () => {\r\n        \r\n        if (!hashMap) {\r\n            return [];\r\n        }\r\n\r\n        const entries = Object.entries(hashMap);\r\n\r\n        let filteredEntries;\r\n\r\n        entries.sort((a, b) => a[1] - b[1]);\r\n\r\n        // Filter only entries with a change less than 0.11\r\n        filteredEntries = entries.filter((entry) => entry[1] <= -0.11);\r\n\r\n        // Get only the bottom 5 least impacted areas\r\n        // filteredEntries = filteredEntries.slice(0, 8);\r\n\r\n        const filteredHashMap = Object.fromEntries(filteredEntries);\r\n        const selectedValues = filteredHashMap ? Object.keys(filteredHashMap) : [];\r\n\r\n        return selectedValues\r\n\r\n    }\r\n\r\n    const getBusiestZones = () => {\r\n\r\n        if (!busynessHashMap){\r\n            return [];\r\n        }\r\n\r\n        const entries = Object.entries(busynessHashMap)\r\n\r\n        let filteredEntries;\r\n\r\n        entries.sort((a, b) => b[1] - a[1]);\r\n\r\n        filteredEntries = entries.slice(0, 8)\r\n\r\n        const filteredHashMap = Object.fromEntries(filteredEntries);\r\n        const selectedValues = filteredHashMap ? Object.keys(filteredHashMap) : [];\r\n\r\n        return selectedValues\r\n\r\n    }\r\n\r\n    const getQuietestZones = () => {\r\n\r\n        if (!busynessHashMap){\r\n            return [];\r\n        }\r\n\r\n        const entries = Object.entries(busynessHashMap)\r\n\r\n        let filteredEntries;\r\n\r\n        entries.sort((a, b) => a[1] - b[1]);\r\n\r\n        filteredEntries = entries.slice(0, 8)\r\n\r\n        const filteredHashMap = Object.fromEntries(filteredEntries);\r\n        const selectedValues = filteredHashMap ? Object.keys(filteredHashMap) : [];\r\n\r\n        return selectedValues\r\n\r\n    }\r\n\r\n    // logic to handle changing of zones being highlighted.\r\n    const highlightZones = () => {\r\n        if (labels.length === 0) {\r\n            return;\r\n        }\r\n    \r\n        // Check if the same button has been pressed twice.\r\n        if (activeButton === lastButtonPressed) {\r\n            // If so, reset the colors, reset lastButtonPressed, and reset activeButton.\r\n            resetColours();\r\n            updateLayerColours(map.current, false, eventBaselineHashMap, busynessHashMap);\r\n            setLastButtonPressed(null);\r\n            setActiveButton(null);  // reset activeButton\r\n        } else {\r\n            // If a different button was pressed, set it as lastButtonPressed and highlight the relevant zones.\r\n            setLastButtonPressed(activeButton);\r\n            highlightEventImpact(labels);\r\n        }\r\n    }\r\n\r\n    // use effect used to handle changes in toggle states\r\n    useEffect(() => {\r\n        highlightZones();\r\n    }, [labels])\r\n\r\n    const handleShowChart = () => {\r\n        setShowLineChart((prevShowChart) => !prevShowChart); // Toggle the showChart state\r\n        setShowChart(!showChart); \r\n      };\r\n  \r\n      const accordionData = [\r\n        \r\n        {\r\n          title: 'Display Line Chart Analysis',\r\n          content: <LineChart map = {map}/>\r\n        },\r\n        {\r\n         title: 'Filter Zones By',\r\n         content: <div className='button-tile-icons-container'>\r\n         <div className={`button-tile-icons ${activeButton === \"Busiest Zones\" ? \"pressed\" : \"\"}`} title=\"Highlight Busiest Zones\" onClick={() => {setLabels(getBusiestZones()); setActiveButton(\"Busiest Zones\")}}>\r\n             <FontAwesomeIcon icon={faWineGlass} style={{ fontSize: '16px' }}/>\r\n             <span>Most Busy</span>\r\n         </div>\r\n         <div className={`button-tile-icons ${activeButton === \"Least Busy Zones\" ? \"pressed\" : \"\"}`} title=\"Highlight Least Busy Zones\" onClick={() => {setLabels(getQuietestZones()); setActiveButton(\"Least Busy Zones\")}}>\r\n             <FontAwesomeIcon icon={faWineGlassEmpty} style={{ fontSize: '16px' }} />\r\n             <span>Least Busy</span>\r\n         </div>\r\n         <div className={`button-tile-icons ${activeButton === \"Most Impacted Zones\" ? \"pressed\" : \"\"}`} title=\"Highlight Zones Most Impacted by Event\" onClick={() => {setLabels(getMostImpactedZones()); setActiveButton(\"Most Impacted Zones\")}}>\r\n             <FontAwesomeIcon icon={faArrowTrendUp} style={{ fontSize: '16px' }} />\r\n             <span>Most Impacted</span>\r\n         </div>\r\n         <div className={`button-tile-icons ${activeButton === \"Least Impacted Zones\" ? \"pressed\" : \"\"}`}  title='Highlight Zones Least Impacted by Event' onClick={() => {setLabels(getLeastImpactedZones()); setActiveButton(\"Least Impacted Zones\")}}>\r\n             <FontAwesomeIcon icon={faArrowTrendDown} style={{ fontSize: '16px' }}/>\r\n             <span>Least Impacted</span>\r\n         </div>\r\n     </div> \r\n        }\r\n      ];\r\n    \r\n    \r\n    return (\r\n        <div className='parent-chart-container'> \r\n  <div className=\"accordion\">\r\n    {accordionData.map(({ title, content }) => (\r\n      <Accordion key={title} title={title} content={content} />\r\n    ))}\r\n      </div>\r\n            <div className='floating-infobox-box-button-container'>\r\n                <div className=\"radio-button\">\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"chartDataOption\"\r\n                        value=\"baselineBusyness\"\r\n                        id=\"baselineBusyness\"\r\n                        checked={!active}\r\n                        onChange={handleOptionChange}\r\n                    />\r\n                    <label htmlFor=\"baselineBusyness\">\r\n                        Turn off Event Impact\r\n                    </label>\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"chartDataOption\"\r\n                        value=\"eventImpact\"\r\n                        id=\"eventImpact\"\r\n                        checked={active}\r\n                        onChange={handleOptionChange}\r\n                    />\r\n                    <label htmlFor=\"eventImpact\">\r\n                        Show Impact of Event\r\n                    </label>\r\n                </div>\r\n                <button className='floating-nav-cta-button' onClick={() => setSplitView(!isSplitView)}>\r\n                    {isSplitView ? 'Show Original' : 'Display Dual Map Comparison'}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NeighbourhoodChartData;\r\n","import React, {useState, useEffect} from 'react';\r\nimport EventCard from './EventCard';\r\nimport NeighbourhoodChartData from './NeighbourhoodChartData';\r\nimport EventAnalysis from './EventAnalysis';\r\nimport \"../App.css\";\r\nimport { useMapContext } from './MapContext';\r\nimport { scaleLinear } from 'd3-scale';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowLeft, faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons'\r\n\r\nfunction FloatingInfoBox( {map, visualiseEventImpact, highlightEventImpact, originalBusynessHashMap, eventBaselineHashMap, busynessHashMap, hashMapOfDifference, colours, resetColours, updateLayerColours, isNeighbourhoodClickedRef, showNoEventInfobox, setShowNoEventInfobox, eventSelected, setEventSelected}) {\r\n\r\n  const {showInfoBox, showChartData, showChart, showNeighborhoodInfoBox, neighbourhoodEvents, colourPairs, colourPairIndex, removeAntline} = useMapContext();\r\n\r\n  const {zoneID, setZoneID, eventName, setEventName, zone, setZone, useOriginal, removeMarker} = useMapContext();\r\n\r\n  const {setShowInfoBox, setShowNeighborhoodInfoBox, setShowChart, setShowChartData} = useMapContext();\r\n\r\n  const {neighbourhoods, originalLat, originalLng, setNeighbourhoodEvents, showAllMarkers, setShowMatchingEvent} = useMapContext();\r\n\r\n  const {eventForAnalysisComponent, setEventForAnalysisComponent} = useMapContext();\r\n\r\n  const {setIsFloatingNavVisible, setIsTimelapseVisible, isTimelapseVisible} = useMapContext();\r\n  \r\n  const [richText, setRichText] = useState(null);\r\n  const [textColour, setTextColour] = useState(null);\r\n\r\n  // when the neighbourhood events changes/if they change/ then set the zone id to the zone id value of the first item in the events list, as they will all have the same value\r\n\r\n  const resetMap = (map) => {\r\n    setShowNeighborhoodInfoBox(false);\r\n    setEventSelected(false);\r\n    setShowChart(false);\r\n    setShowNoEventInfobox(true); \r\n    setIsTimelapseVisible(false);\r\n    setShowMatchingEvent(true);\r\n    setShowInfoBox(false);\r\n    setShowChartData(false);\r\n    setNeighbourhoodEvents([]);\r\n    showAllMarkers(map.current);\r\n    map.current.flyTo({zoom: 12, essential: true, center: [originalLng, originalLat] });\r\n    updateLayerColours(map.current, true, originalBusynessHashMap, busynessHashMap);\r\n    neighbourhoods.features.forEach((neighbourhood) => {\r\n      map.current.setPaintProperty(neighbourhood.id, 'fill-opacity', 0.6);\r\n      map.current.setPaintProperty(neighbourhood.id + '-line', 'line-width', 0);\r\n    });\r\n    isNeighbourhoodClickedRef.current = false; // user has reset the select function so we reset the map to default state.\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(neighbourhoodEvents && neighbourhoodEvents.length > 0 && !eventSelected) {\r\n      setZoneID(neighbourhoodEvents[0].Zone_ID);\r\n      setEventName(neighbourhoodEvents[0].Event_Name);\r\n      setZone(neighbourhoodEvents[0].Zone_Name)\r\n      setEventForAnalysisComponent(neighbourhoodEvents[0])\r\n    }\r\n  }, [neighbourhoodEvents]);\r\n\r\n  useEffect(() => {\r\n    const colourScale = scaleLinear().domain([0, 0.4, 0.8]).range(colourPairs[colourPairIndex]);\r\n    const neighbourhoodBusyness = useOriginal ? eventBaselineHashMap[zoneID] : busynessHashMap[zoneID]\r\n    const colour = colourScale(neighbourhoodBusyness);\r\n    setTextColour(colour);\r\n    let text;\r\n    if (neighbourhoodBusyness < 0.29) {\r\n        text = 'Not Very Busy';\r\n    } else if (neighbourhoodBusyness >= 0.29 && neighbourhoodBusyness < 0.4) {\r\n        text = 'Relatively Busy';\r\n    } else if (neighbourhoodBusyness >= 0.4 && neighbourhoodBusyness < 0.7) {\r\n        text = 'Busy';\r\n    } else {\r\n        text = 'Extremely Busy';\r\n    }\r\n    setRichText(text);\r\n  }, [colourPairs, colourPairIndex, busynessHashMap, eventBaselineHashMap, zoneID]);\r\n  \r\n  const eventCards = neighbourhoodEvents ? neighbourhoodEvents.map((event, i) =>{\r\n    return (\r\n      <EventCard \r\n        key = {i}\r\n        event={event}\r\n        visualiseEventImpact={visualiseEventImpact}\r\n        map={map}\r\n      />\r\n      )\r\n  }) : null;\r\n\r\n  function renderHeader() {\r\n    return (\r\n      <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-between'}}>\r\n        <button className='floating-info-box-back-button' onClick={() => {\r\n          removeAntline(map.current)\r\n          resetMap(map);\r\n          removeMarker();\r\n          setIsFloatingNavVisible(true);\r\n        }}>\r\n          <FontAwesomeIcon icon={faArrowLeft} /> <span style={{marginLeft: '8px'}}>Go Back</span>\r\n        </button>\r\n        {eventSelected \r\n          ? (isTimelapseVisible \r\n              ? <button className='floating-info-box-show-hide-timelapse' onClick={() => setIsTimelapseVisible(!isTimelapseVisible)}> \r\n                  <FontAwesomeIcon icon={faEyeSlash} /> <span style={{marginLeft: '8px'}}>Hide Timelapse </span>\r\n                </button> \r\n              : <button className='floating-info-box-show-hide-timelapse' onClick={() => setIsTimelapseVisible(!isTimelapseVisible)}>\r\n                  <FontAwesomeIcon icon={faEye} /> <span style={{marginLeft: '8px'}}> Show Timelapse</span>\r\n                </button>) \r\n          : null \r\n        }\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  function renderZoneInfo() {\r\n    return (\r\n      <h1 className='floating-info-box-zone-header'>\r\n        {showChartData ? eventName : zone}\r\n      </h1>\r\n    );\r\n  }\r\n  \r\n  function renderChartOrAnalysis() {\r\n  \r\n    if (!showChartData) {\r\n      return <h3 className='floating-info-box-zone-busyness-sub-header'> {zone} is <span style={{ color: textColour }}>{richText}</span></h3>;\r\n    }\r\n  \r\n    return showChart ? null : <EventAnalysis eventForAnalysisComponent={eventForAnalysisComponent} showChart={showChart}/>;\r\n  }\r\n\r\n\r\n  function renderInfoBoxContent() {\r\n\r\n    if (!showInfoBox) {\r\n      return null;\r\n    }\r\n  \r\n    if (showChartData) {\r\n      return (\r\n        <NeighbourhoodChartData \r\n          map={map}\r\n          hashMap={hashMapOfDifference}\r\n          busynessHashMap={busynessHashMap}\r\n          eventBaselineHashMap={eventBaselineHashMap}\r\n          colours={colours}\r\n          highlightEventImpact={highlightEventImpact}\r\n          zoneID={zoneID}\r\n          resetColours={resetColours}\r\n          \r\n        />\r\n      );\r\n    }\r\n  \r\n    return eventCards;\r\n\r\n  }\r\n  \r\n  function renderNeighborhoodMessage() {\r\n\r\n    if (showNeighborhoodInfoBox == false || showNoEventInfobox == false) {\r\n      return \r\n    } else {\r\n      return <p style={{padding: '0 8px'}}>There are no events happening in this neighbourhood.</p>;\r\n    }\r\n  }\r\n  \r\n  return (\r\n\r\n    (showInfoBox || showNeighborhoodInfoBox) && (\r\n      <div className='floating-info-box'>\r\n        {renderHeader()}\r\n        {renderZoneInfo()}\r\n        {renderChartOrAnalysis()} \r\n        {renderInfoBoxContent()}\r\n        {renderNeighborhoodMessage()}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default FloatingInfoBox"],"names":["_ref","text","eventForAnalysisComponent","_useState","showChart","useState","_useState2","_slicedToArray","isTextShort","setIsTextShort","_jsxs","className","children","style","display","flexDirection","alignItems","margin","marginRight","textAlign","Event_Impact_Start","Event_Impact_End","Event_Impact_Analysis","length","substring","_jsx","color","cursor","textDecoration","onClick","event","visualiseEventImpact","map","_useMapContext","useMapContext","setShowChartData","removeAllButOneMarker","addAntline","removeAntline","addMarker","marginTop","Event_Name","description","current","Event_ID","eventId","antlineEvent","antline","find","feature","properties","event_id","setTimeout","lastCoordinates","geometry","coordinates","ChartJS","register","annotationPlugin","neighbourhoods","eventID","eventComparisonData","zoneID","setZoneID","zone","setZone","zones","features","zoneOptions","zoneKeys","location_id","prevSelectedZone","setPrevSelectedZone","_useState3","_useState4","dataValues","setDataValues","_useState5","_useState6","labels","setLabels","setPaintProperty","dropDownOptions","index","value","times","chartData","datasets","label","data","fill","target","above","below","borderColor","tension","options","responsive","maintainAspectRatio","aspectRatio","plugins","legend","annotation","annotations","startLine","type","mode","scaleID","borderWidth","content","position","backgroundColor","endLine","line1","scales","x","grid","ticks","y","useEffect","updatedDataValues","updatedLabels","key","currentBusynessValue","currentTimeValue","push","onChange","e","selectedIndex","dataset","zoneId","justifyContent","Line","title","isActive","setIsActive","concat","FontAwesomeIcon","icon","faChevronUp","faChevronDown","fontSize","hashMap","busynessHashMap","eventBaselineHashMap","colours","highlightEventImpact","resetColours","_useMapContext2","isSplitView","setShowChart","setSplitView","updateLayerColours","lastButtonPressed","setLastButtonPressed","activeButton","setActiveButton","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","setChartData","_useState13","_useState14","showMostImpactedZones","setShowMostImpactedZones","_useState15","_useState16","_useState17","_useState18","active","setActive","_getImpactedZonesForC","names","filteredEntries","entries","Object","sort","a","b","slice","filteredHashMap","fromEntries","values","_ref2","matchingObject","neighbourhood","id","getImpactedZonesForChart","newChartData","barThickness","context","chart","chartArea","dataIndex","getGradientMostImpacted","getGradientLeastImpacted","indexAxis","beginAtZero","font","size","maxRotation","minRotation","tooltip","family","align","makeChartData","ctx","_context$chartArea","top","bottom","gradientSegment","createLinearGradient","addColorStop","_context$chartArea2","handleOptionChange","accordionData","LineChart","keys","getBusiestZones","faWineGlass","getQuietestZones","faWineGlassEmpty","filter","entry","getMostImpactedZones","faArrowTrendUp","getLeastImpactedZones","faArrowTrendDown","_ref4","Accordion","name","checked","htmlFor","originalBusynessHashMap","hashMapOfDifference","isNeighbourhoodClickedRef","showNoEventInfobox","setShowNoEventInfobox","eventSelected","setEventSelected","showInfoBox","showChartData","showNeighborhoodInfoBox","neighbourhoodEvents","colourPairs","colourPairIndex","eventName","setEventName","useOriginal","removeMarker","_useMapContext3","setShowInfoBox","setShowNeighborhoodInfoBox","_useMapContext4","originalLat","originalLng","setNeighbourhoodEvents","showAllMarkers","setShowMatchingEvent","_useMapContext5","setEventForAnalysisComponent","_useMapContext6","setIsFloatingNavVisible","setIsTimelapseVisible","isTimelapseVisible","richText","setRichText","textColour","setTextColour","Zone_ID","Zone_Name","colourScale","scaleLinear","domain","range","neighbourhoodBusyness","colour","eventCards","i","EventCard","flyTo","zoom","essential","center","forEach","resetMap","faArrowLeft","marginLeft","faEyeSlash","faEye","EventAnalysis","NeighbourhoodChartData","padding"],"sourceRoot":""}