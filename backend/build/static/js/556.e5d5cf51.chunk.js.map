{"version":3,"file":"static/js/556.e5d5cf51.chunk.js","mappings":"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","sources":["components/MobileDualMapTimelapse.js","components/MobileSplitViewMap.js","components/SplitViewController.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { useMapContext } from './MapContext';\r\nimport \"../App.css\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlay, faPause } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction DualMapTimelpase ({topMap, bottomMap, originalBusynessHashMap, timelapseData, baselineTimelapseData, busynessHashMap}) {\r\n\r\n    const { updateLayerColours, neighbourhoodEvents } = useMapContext();\r\n\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [elapsedTime, setElapsedTime] = useState(0);\r\n    const [index, setIndex] = useState(0);\r\n    const [currentEvent, setCurrentEvent] = useState(null);\r\n\r\n    const timerRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        setCurrentEvent(neighbourhoodEvents[0])\r\n    }, [neighbourhoodEvents]);\r\n    \r\n    const startTimelapse = () => {\r\n        setIsPlaying(true);\r\n\r\n        timerRef.current = setInterval(() => {\r\n            setElapsedTime(prevTime => prevTime + 1);\r\n        }, 1000);\r\n    };\r\n\r\n    const pauseTimelapse = () => {\r\n        setIsPlaying(false);\r\n        clearInterval(timerRef.current);\r\n    };\r\n\r\n    const handlePlay = () => {\r\n        isPlaying ? pauseTimelapse() : startTimelapse();\r\n    };\r\n\r\n    const endTimelapse = () => {\r\n        \r\n        const resetPosition = baselineTimelapseData[16]\r\n\r\n        setIndex(0);\r\n        setElapsedTime(0);\r\n        setIsPlaying(false);\r\n        clearInterval(timerRef.current);\r\n\r\n        setTimeout(() => {\r\n            updateLayerColours(topMap.current, false, busynessHashMap, resetPosition);\r\n            updateLayerColours(bottomMap.current, false, busynessHashMap, busynessHashMap);\r\n        }, 400)\r\n    }\r\n\r\n    const handleSliderChange = (e) => {\r\n\r\n        pauseTimelapse(); \r\n        const newElapsedTime = Number(e.target.value);\r\n        setElapsedTime(newElapsedTime);\r\n    \r\n        // Ensure we have a valid integer index\r\n        const index = Math.floor(newElapsedTime);\r\n        if (timelapseData && timelapseData.hasOwnProperty(index)) {\r\n            const TimelapseHashMap = timelapseData[index];\r\n            const BaselineHashMap = baselineTimelapseData[index];\r\n            updateLayerColours(bottomMap.current, false, originalBusynessHashMap, TimelapseHashMap);\r\n            updateLayerColours(topMap.current, false, originalBusynessHashMap, BaselineHashMap);\r\n            setIndex(index);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n\r\n        if (elapsedTime >= 24) {\r\n            endTimelapse();\r\n        }\r\n\r\n        if(Number.isInteger(elapsedTime) && timelapseData && timelapseData.hasOwnProperty(index)){\r\n            const TimelapseHashMap = timelapseData[index];\r\n            const BaselineHashMap = baselineTimelapseData[index];\r\n            updateLayerColours(bottomMap.current, false, originalBusynessHashMap, TimelapseHashMap);\r\n            updateLayerColours(topMap.current, false, originalBusynessHashMap, BaselineHashMap);\r\n            setIndex(index + 1);\r\n        }\r\n        \r\n    }, [elapsedTime]);\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            if (timerRef.current) clearInterval(timerRef.current);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div className='timelapse-container-mobile'>\r\n            <button className=\"timelapse-button\" onClick={handlePlay}>\r\n                {isPlaying ? <FontAwesomeIcon icon={faPause} style={{color:'#D3D3D3'}}/> : <FontAwesomeIcon icon={faPlay} style={{color:'#D3D3D3'}}/>}\r\n                <label htmlFor=\"toggle\" className=\"timelapse-label\">{isPlaying ? \"pause\" : \"play\"}</label>\r\n            </button>\r\n            <div className='slider-container-parent'>\r\n                <div className='slider-context-container'>\r\n                    <p className='elapsed-time-text'> Local Time: {elapsedTime >= 10 ? '' : 0}{elapsedTime}:00 {elapsedTime >= 12 ? 'PM' : 'AM'}</p>\r\n                </div>\r\n                <div className='slider-container'>\r\n                    <input type=\"range\" min=\"0\" max=\"24\" value={elapsedTime} onChange={handleSliderChange} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default DualMapTimelpase;\r\n","import React, { useState, useCallback, useMemo, useRef} from 'react';\r\nimport Map from 'react-map-gl';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport SplitViewController from '../components/SplitViewController'\r\nimport MobileDualMapTimelapse from './MobileDualMapTimelapse';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport { useMapContext } from './MapContext';\r\nimport { scaleLinear } from 'd3-scale';\r\n\r\nconst TopMapStyle = {\r\n    position: 'absolute',\r\n    top: '0',\r\n    width: '100%',\r\n    height: '50vh'\r\n};\r\n\r\nconst BottomMapStyle = {\r\n  position: 'absolute',\r\n  bottom: '0',\r\n  width: '100%',\r\n  height: '50vh'\r\n};\r\n  \r\nfunction MobileSplitViewMap({eventBaselineHashMap, busynessHashMap, timelapseData, baselineTimelapseData}) {\r\n\r\n  const {MAPBOX_ACCESS_TOKEN, isSplitView, setSplitView, renderNeighbourhoods, markers, mapStyle} = useMapContext();\r\n\r\n  const {updateLayerColours} = useMapContext();\r\n\r\n  const {colourPairs, colourPairIndex, neighbourhoods} = useMapContext();\r\n\r\n  const topMapRef = useRef();\r\n  const bottomMapRef = useRef();\r\n  const popup = useRef(null);\r\n\r\n  const [viewState, setViewState] = useState({\r\n    longitude: -73.9857,\r\n    latitude: 40.7484,\r\n    zoom: 11.2,\r\n    pitch: 30\r\n  });\r\n\r\n  const [mode, setMode] = useState('side-by-side');\r\n  const [activeMap, setActiveMap] = useState('left');\r\n\r\n  const onTopMoveStart = useCallback(() => setActiveMap('top'), []);\r\n  const onBottomMoveStart = useCallback(() => setActiveMap('bottom'), []);\r\n  const onMove = useCallback(evt => setViewState(evt.viewState), []);\r\n\r\n  const height = typeof window === 'undefined' ? 100 : window.innerHeight;\r\n\r\n  const topMapPadding = useMemo(() => {\r\n    return {top: mode === 'split-screen' ? height / 2 : 0, left: 0, right: 0, bottom: 0};\r\n  }, [height, mode]);\r\n  \r\n  const bottomMapPadding = useMemo(() => {\r\n    return {bottom: mode === 'split-screen' ? height / 2 : 0, top: 0, left: 0, right: 0};\r\n  }, [height, mode]);\r\n\r\n  const width = typeof window === 'undefined' ? 100 : window.innerWidth;\r\n\r\n  // Map Event Listeners for mouse\r\n  const handleSplitScreenMouseInteractions = (map, hashmap) => {\r\n\r\n    // Create a new colourScale each time you handle the color change\r\n    const colourScale = scaleLinear().domain([0, 0.4, 0.8]).range(colourPairs[colourPairIndex]);\r\n\r\n    neighbourhoods.features.forEach((neighbourhood) => {\r\n\r\n      // Mouseover event\r\n      map.on('mousemove', neighbourhood.id, (e) => {\r\n\r\n      map.getCanvas().style.cursor = 'pointer';\r\n      map.setPaintProperty(neighbourhood.id, 'fill-opacity', 0.9);\r\n      map.setPaintProperty(neighbourhood.id+'-line', 'line-width', 4);\r\n      \r\n      const features = map.queryRenderedFeatures(e.point, { layers: [neighbourhood.id] });\r\n\r\n      if (features.length > 0) {\r\n\r\n        if (!popup.current) {\r\n\r\n            // code to allow the pop up to display a bit over our mouse interaction.\r\n\r\n            const markerHeight = 10;\r\n            const markerRadius = 10;\r\n            const linearOffset = 5;\r\n            const popupOffsets = {\r\n            'top': [0, 0],\r\n            'top-left': [0, 0],\r\n            'top-right': [0, 0],\r\n            'bottom': [0, -markerHeight],\r\n            'bottom-left': [linearOffset, (markerHeight - markerRadius + linearOffset) * -1],\r\n            'bottom-right': [-linearOffset, (markerHeight - markerRadius + linearOffset) * -1],\r\n            'left': [markerRadius, (markerHeight - markerRadius) * -1],\r\n            'right': [-markerRadius, (markerHeight - markerRadius) * -1]\r\n            };\r\n\r\n            // creating the popup object\r\n\r\n            popup.current = new mapboxgl.Popup({\r\n                offset: popupOffsets,\r\n                closeButton: false,\r\n                closeOnClick: false,\r\n            });\r\n          }\r\n\r\n          const feature = features[0];\r\n          const zone = feature.properties.zone; \r\n\r\n          const score = hashmap[neighbourhood.id]\r\n          \r\n          // Apply the busyness score to the color scale\r\n          const textColour = colourScale(score);\r\n\r\n          let richText;\r\n          if (score < 0.29) {\r\n              richText = 'Not Very Busy';\r\n          } else if (score >= 0.29 && score < 0.4) {\r\n              richText = 'Relatively Busy';\r\n          } else if (score >= 0.4 && score < 0.7) {\r\n              richText = 'Busy';\r\n          } else {\r\n              richText = 'Extremely Busy';\r\n          }\r\n\r\n          // Set the HTML content of the popup with the colored text\r\n          popup.current.setLngLat(e.lngLat)\r\n          .setHTML(`${zone}: <span style=\"color: ${textColour}\">${richText}</span>\r\n          <br>\r\n          Busyness Score:  <span style=\"color: ${textColour}\">${Math.floor(score * 100)}</span>\r\n          `)\r\n          .addTo(map);\r\n        }\r\n\r\n      });\r\n  \r\n      // Mouseleave event: this will be fired whenever the mouse leaves a feature in the specified layer.\r\n      map.on('mouseleave', neighbourhood.id, () => {\r\n            map.getCanvas().style.cursor = '';\r\n            map.setPaintProperty(neighbourhood.id, 'fill-opacity', 0.6);\r\n            map.setPaintProperty(neighbourhood.id+'-line', 'line-width', 0);\r\n\r\n            if (popup.current) {\r\n                popup.current.remove();\r\n                popup.current = null;\r\n            }\r\n      });\r\n    });\r\n  }\r\n\r\n  const onTopMapLoad = useCallback((event) => {\r\n    const map = event.target;\r\n    topMapRef.current = map;\r\n    renderNeighbourhoods(map);\r\n    updateLayerColours(map, false, eventBaselineHashMap, busynessHashMap)\r\n    handleSplitScreenMouseInteractions(map, eventBaselineHashMap)\r\n  }, [renderNeighbourhoods]);\r\n\r\n  const onBottomMapLoad = useCallback((event) => {\r\n    const map = event.target;\r\n    bottomMapRef.current = map;\r\n    renderNeighbourhoods(map);\r\n    updateLayerColours(map, true, eventBaselineHashMap, busynessHashMap)\r\n    handleSplitScreenMouseInteractions(map, busynessHashMap)\r\n  }, [renderNeighbourhoods]);\r\n\r\n  return (\r\n    <>\r\n      <div style={{position: 'relative', height: '100vh'}}>\r\n        <Map\r\n          id=\"top-map\"\r\n          {...viewState}\r\n          padding={topMapPadding}\r\n          onMoveStart={onTopMoveStart}\r\n          onMove={activeMap === 'top' ? onMove : undefined}\r\n          style={TopMapStyle}\r\n          mapStyle={mapStyle}\r\n          mapboxAccessToken={MAPBOX_ACCESS_TOKEN}\r\n          onLoad={map => onTopMapLoad(map)} // Added this line\r\n        />\r\n\r\n        <Map\r\n          id=\"bottom-map\"\r\n          {...viewState}\r\n          padding={bottomMapPadding}\r\n          onMoveStart={onBottomMoveStart}\r\n          onMove={activeMap === 'bottom' ? onMove : undefined}\r\n          style={BottomMapStyle}\r\n          mapStyle={mapStyle}\r\n          mapboxAccessToken={MAPBOX_ACCESS_TOKEN}\r\n          onLoad={map => onBottomMapLoad(map)} // Added this line\r\n        />\r\n        \r\n        <SplitViewController\r\n          isSplitView={isSplitView}\r\n          setSplitView={setSplitView}\r\n        />\r\n\r\n        <MobileDualMapTimelapse \r\n          topMap={topMapRef}\r\n          bottomMap={bottomMapRef}\r\n          eventBaselineHashMap={eventBaselineHashMap}\r\n          busynessHashMap={busynessHashMap}\r\n          baselineTimelapseData={baselineTimelapseData}\r\n          timelapseData={timelapseData}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MobileSplitViewMap;","import React, {useEffect} from 'react';\r\nimport { useMapContext } from './MapContext';\r\n\r\nfunction SplitViewController ({ isSplitView, setSplitView }) {\r\n\r\n    const { setEventForAnalysisComponent, setShowChart, neighbourhoodEvents} = useMapContext();\r\n    \r\n    useEffect(() => {\r\n        if(neighbourhoodEvents && neighbourhoodEvents.length > 0) {\r\n          setEventForAnalysisComponent(neighbourhoodEvents[0])\r\n        }\r\n      }, [neighbourhoodEvents]);\r\n\r\n    return (\r\n        <div className=\"split-view-controller\">\r\n            <button className='split-view-controller-toggle-button' onClick={() => {\r\n                setShowChart(false);\r\n                setSplitView(!isSplitView);\r\n            }}>\r\n                {isSplitView ? 'Return to Single Map View' : 'Show Splitview'}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SplitViewController;\r\n"],"names":["_ref","topMap","bottomMap","originalBusynessHashMap","timelapseData","baselineTimelapseData","busynessHashMap","_useMapContext","useMapContext","updateLayerColours","neighbourhoodEvents","_useState","useState","_useState2","_slicedToArray","isPlaying","setIsPlaying","_useState3","_useState4","elapsedTime","setElapsedTime","_useState5","_useState6","index","setIndex","_useState7","_useState8","setCurrentEvent","timerRef","useRef","useEffect","pauseTimelapse","clearInterval","current","resetPosition","setTimeout","endTimelapse","Number","isInteger","hasOwnProperty","TimelapseHashMap","BaselineHashMap","_jsxs","className","children","onClick","setInterval","prevTime","_jsx","FontAwesomeIcon","icon","faPause","style","color","faPlay","htmlFor","type","min","max","value","onChange","e","newElapsedTime","target","Math","floor","TopMapStyle","position","top","width","height","BottomMapStyle","bottom","eventBaselineHashMap","MAPBOX_ACCESS_TOKEN","isSplitView","setSplitView","renderNeighbourhoods","mapStyle","markers","_useMapContext3","colourPairs","colourPairIndex","neighbourhoods","topMapRef","bottomMapRef","popup","longitude","latitude","zoom","pitch","viewState","setViewState","mode","activeMap","setActiveMap","onTopMoveStart","useCallback","onBottomMoveStart","onMove","evt","window","innerHeight","topMapPadding","useMemo","left","right","bottomMapPadding","handleSplitScreenMouseInteractions","innerWidth","map","hashmap","colourScale","scaleLinear","domain","range","features","forEach","neighbourhood","on","id","getCanvas","cursor","setPaintProperty","queryRenderedFeatures","point","layers","length","markerRadius","popupOffsets","mapboxgl","offset","closeButton","closeOnClick","richText","zone","properties","score","textColour","setLngLat","lngLat","setHTML","concat","addTo","remove","onTopMapLoad","event","onBottomMapLoad","_Fragment","Map","_objectSpread","padding","onMoveStart","undefined","mapboxAccessToken","onLoad","SplitViewController","MobileDualMapTimelapse","setEventForAnalysisComponent","setShowChart"],"sourceRoot":""}